/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.records.GenerateprofitandlossstatementRecord;

import java.math.BigDecimal;
import java.time.LocalDate;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Generateprofitandlossstatement extends TableImpl<GenerateprofitandlossstatementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.generateprofitandlossstatement</code>
     */
    public static final Generateprofitandlossstatement GENERATEPROFITANDLOSSSTATEMENT = new Generateprofitandlossstatement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GenerateprofitandlossstatementRecord> getRecordType() {
        return GenerateprofitandlossstatementRecord.class;
    }

    /**
     * The column
     * <code>public.generateprofitandlossstatement.category_type</code>.
     */
    public final TableField<GenerateprofitandlossstatementRecord, String> CATEGORY_TYPE = createField(DSL.name("category_type"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.generateprofitandlossstatement.item_description</code>.
     */
    public final TableField<GenerateprofitandlossstatementRecord, String> ITEM_DESCRIPTION = createField(DSL.name("item_description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.generateprofitandlossstatement.amount</code>.
     */
    public final TableField<GenerateprofitandlossstatementRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC, this, "");

    private Generateprofitandlossstatement(Name alias, Table<GenerateprofitandlossstatementRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.LOCALDATE),
            DSL.val(null, SQLDataType.LOCALDATE)
        });
    }

    private Generateprofitandlossstatement(Name alias, Table<GenerateprofitandlossstatementRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private Generateprofitandlossstatement(Name alias, Table<GenerateprofitandlossstatementRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>public.generateprofitandlossstatement</code>
     * table reference
     */
    public Generateprofitandlossstatement(String alias) {
        this(DSL.name(alias), GENERATEPROFITANDLOSSSTATEMENT);
    }

    /**
     * Create an aliased <code>public.generateprofitandlossstatement</code>
     * table reference
     */
    public Generateprofitandlossstatement(Name alias) {
        this(alias, GENERATEPROFITANDLOSSSTATEMENT);
    }

    /**
     * Create a <code>public.generateprofitandlossstatement</code> table
     * reference
     */
    public Generateprofitandlossstatement() {
        this(DSL.name("generateprofitandlossstatement"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Generateprofitandlossstatement as(String alias) {
        return new Generateprofitandlossstatement(DSL.name(alias), this, parameters);
    }

    @Override
    public Generateprofitandlossstatement as(Name alias) {
        return new Generateprofitandlossstatement(alias, this, parameters);
    }

    @Override
    public Generateprofitandlossstatement as(Table<?> alias) {
        return new Generateprofitandlossstatement(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Generateprofitandlossstatement rename(String name) {
        return new Generateprofitandlossstatement(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Generateprofitandlossstatement rename(Name name) {
        return new Generateprofitandlossstatement(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Generateprofitandlossstatement rename(Table<?> name) {
        return new Generateprofitandlossstatement(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public Generateprofitandlossstatement call(
          LocalDate pStartDate
        , LocalDate pEndDate
    ) {
        Generateprofitandlossstatement result = new Generateprofitandlossstatement(DSL.name("generateprofitandlossstatement"), null, new Field[] {
            DSL.val(pStartDate, SQLDataType.LOCALDATE),
            DSL.val(pEndDate, SQLDataType.LOCALDATE)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public Generateprofitandlossstatement call(
          Field<LocalDate> pStartDate
        , Field<LocalDate> pEndDate
    ) {
        Generateprofitandlossstatement result = new Generateprofitandlossstatement(DSL.name("generateprofitandlossstatement"), null, new Field[] {
            pStartDate,
            pEndDate
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
