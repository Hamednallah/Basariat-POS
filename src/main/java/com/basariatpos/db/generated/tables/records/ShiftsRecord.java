/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables.records;


import com.basariatpos.db.generated.tables.Shifts;

import java.math.BigDecimal;
import java.time.OffsetDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ShiftsRecord extends UpdatableRecordImpl<ShiftsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.shifts.shift_id</code>.
     */
    public void setShiftId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.shifts.shift_id</code>.
     */
    public Integer getShiftId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.shifts.started_by_user_id</code>.
     */
    public void setStartedByUserId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.shifts.started_by_user_id</code>.
     */
    public Integer getStartedByUserId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.shifts.start_time</code>.
     */
    public void setStartTime(OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.shifts.start_time</code>.
     */
    public OffsetDateTime getStartTime() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>public.shifts.end_time</code>.
     */
    public void setEndTime(OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.shifts.end_time</code>.
     */
    public OffsetDateTime getEndTime() {
        return (OffsetDateTime) get(3);
    }

    /**
     * Setter for <code>public.shifts.status</code>.
     */
    public void setStatus(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.shifts.status</code>.
     */
    public String getStatus() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.shifts.opening_float</code>.
     */
    public void setOpeningFloat(BigDecimal value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.shifts.opening_float</code>.
     */
    public BigDecimal getOpeningFloat() {
        return (BigDecimal) get(5);
    }

    /**
     * Setter for <code>public.shifts.closing_cash_counted</code>.
     */
    public void setClosingCashCounted(BigDecimal value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.shifts.closing_cash_counted</code>.
     */
    public BigDecimal getClosingCashCounted() {
        return (BigDecimal) get(6);
    }

    /**
     * Setter for <code>public.shifts.expected_cash_in_drawer</code>.
     */
    public void setExpectedCashInDrawer(BigDecimal value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.shifts.expected_cash_in_drawer</code>.
     */
    public BigDecimal getExpectedCashInDrawer() {
        return (BigDecimal) get(7);
    }

    /**
     * Setter for <code>public.shifts.cash_variance</code>.
     */
    public void setCashVariance(BigDecimal value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.shifts.cash_variance</code>.
     */
    public BigDecimal getCashVariance() {
        return (BigDecimal) get(8);
    }

    /**
     * Setter for <code>public.shifts.notes</code>.
     */
    public void setNotes(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.shifts.notes</code>.
     */
    public String getNotes() {
        return (String) get(9);
    }

    /**
     * Setter for <code>public.shifts.created_at</code>.
     */
    public void setCreatedAt(OffsetDateTime value) {
        set(10, value);
    }

    /**
     * Getter for <code>public.shifts.created_at</code>.
     */
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(10);
    }

    /**
     * Setter for <code>public.shifts.updated_at</code>.
     */
    public void setUpdatedAt(OffsetDateTime value) {
        set(11, value);
    }

    /**
     * Getter for <code>public.shifts.updated_at</code>.
     */
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ShiftsRecord
     */
    public ShiftsRecord() {
        super(Shifts.SHIFTS);
    }

    /**
     * Create a detached, initialised ShiftsRecord
     */
    public ShiftsRecord(Integer shiftId, Integer startedByUserId, OffsetDateTime startTime, OffsetDateTime endTime, String status, BigDecimal openingFloat, BigDecimal closingCashCounted, BigDecimal expectedCashInDrawer, BigDecimal cashVariance, String notes, OffsetDateTime createdAt, OffsetDateTime updatedAt) {
        super(Shifts.SHIFTS);

        setShiftId(shiftId);
        setStartedByUserId(startedByUserId);
        setStartTime(startTime);
        setEndTime(endTime);
        setStatus(status);
        setOpeningFloat(openingFloat);
        setClosingCashCounted(closingCashCounted);
        setExpectedCashInDrawer(expectedCashInDrawer);
        setCashVariance(cashVariance);
        setNotes(notes);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ShiftsRecord
     */
    public ShiftsRecord(com.basariatpos.db.generated.tables.pojos.Shifts value) {
        super(Shifts.SHIFTS);

        if (value != null) {
            setShiftId(value.getShiftId());
            setStartedByUserId(value.getStartedByUserId());
            setStartTime(value.getStartTime());
            setEndTime(value.getEndTime());
            setStatus(value.getStatus());
            setOpeningFloat(value.getOpeningFloat());
            setClosingCashCounted(value.getClosingCashCounted());
            setExpectedCashInDrawer(value.getExpectedCashInDrawer());
            setCashVariance(value.getCashVariance());
            setNotes(value.getNotes());
            setCreatedAt(value.getCreatedAt());
            setUpdatedAt(value.getUpdatedAt());
            resetChangedOnNotNull();
        }
    }
}
