/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Indexes;
import com.basariatpos.db.generated.Keys;
import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.Inventoryitems.InventoryitemsPath;
import com.basariatpos.db.generated.tables.Products.ProductsPath;
import com.basariatpos.db.generated.tables.Salesorders.SalesordersPath;
import com.basariatpos.db.generated.tables.records.SalesorderitemsRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Salesorderitems extends TableImpl<SalesorderitemsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.salesorderitems</code>
     */
    public static final Salesorderitems SALESORDERITEMS = new Salesorderitems();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SalesorderitemsRecord> getRecordType() {
        return SalesorderitemsRecord.class;
    }

    /**
     * The column <code>public.salesorderitems.so_item_id</code>.
     */
    public final TableField<SalesorderitemsRecord, Integer> SO_ITEM_ID = createField(DSL.name("so_item_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.salesorderitems.sales_order_id</code>.
     */
    public final TableField<SalesorderitemsRecord, Integer> SALES_ORDER_ID = createField(DSL.name("sales_order_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.salesorderitems.inventory_item_id</code>.
     */
    public final TableField<SalesorderitemsRecord, Integer> INVENTORY_ITEM_ID = createField(DSL.name("inventory_item_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.salesorderitems.service_product_id</code>.
     */
    public final TableField<SalesorderitemsRecord, Integer> SERVICE_PRODUCT_ID = createField(DSL.name("service_product_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.salesorderitems.description</code>.
     */
    public final TableField<SalesorderitemsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.salesorderitems.quantity</code>.
     */
    public final TableField<SalesorderitemsRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.salesorderitems.unit_price</code>.
     */
    public final TableField<SalesorderitemsRecord, BigDecimal> UNIT_PRICE = createField(DSL.name("unit_price"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * The column <code>public.salesorderitems.item_subtotal</code>.
     */
    public final TableField<SalesorderitemsRecord, BigDecimal> ITEM_SUBTOTAL = createField(DSL.name("item_subtotal"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>public.salesorderitems.prescription_details</code>.
     */
    public final TableField<SalesorderitemsRecord, JSONB> PRESCRIPTION_DETAILS = createField(DSL.name("prescription_details"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.salesorderitems.is_custom_lenses</code>.
     */
    public final TableField<SalesorderitemsRecord, Boolean> IS_CUSTOM_LENSES = createField(DSL.name("is_custom_lenses"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column
     * <code>public.salesorderitems.is_restocked_on_abandonment</code>.
     */
    public final TableField<SalesorderitemsRecord, Boolean> IS_RESTOCKED_ON_ABANDONMENT = createField(DSL.name("is_restocked_on_abandonment"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private Salesorderitems(Name alias, Table<SalesorderitemsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Salesorderitems(Name alias, Table<SalesorderitemsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.salesorderitems</code> table reference
     */
    public Salesorderitems(String alias) {
        this(DSL.name(alias), SALESORDERITEMS);
    }

    /**
     * Create an aliased <code>public.salesorderitems</code> table reference
     */
    public Salesorderitems(Name alias) {
        this(alias, SALESORDERITEMS);
    }

    /**
     * Create a <code>public.salesorderitems</code> table reference
     */
    public Salesorderitems() {
        this(DSL.name("salesorderitems"), null);
    }

    public <O extends Record> Salesorderitems(Table<O> path, ForeignKey<O, SalesorderitemsRecord> childPath, InverseForeignKey<O, SalesorderitemsRecord> parentPath) {
        super(path, childPath, parentPath, SALESORDERITEMS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SalesorderitemsPath extends Salesorderitems implements Path<SalesorderitemsRecord> {
        public <O extends Record> SalesorderitemsPath(Table<O> path, ForeignKey<O, SalesorderitemsRecord> childPath, InverseForeignKey<O, SalesorderitemsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SalesorderitemsPath(Name alias, Table<SalesorderitemsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SalesorderitemsPath as(String alias) {
            return new SalesorderitemsPath(DSL.name(alias), this);
        }

        @Override
        public SalesorderitemsPath as(Name alias) {
            return new SalesorderitemsPath(alias, this);
        }

        @Override
        public SalesorderitemsPath as(Table<?> alias) {
            return new SalesorderitemsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SALESORDERITEMS_SALESORDERID);
    }

    @Override
    public Identity<SalesorderitemsRecord, Integer> getIdentity() {
        return (Identity<SalesorderitemsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SalesorderitemsRecord> getPrimaryKey() {
        return Keys.SALESORDERITEMS_PKEY;
    }

    @Override
    public List<ForeignKey<SalesorderitemsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SALESORDERITEMS__SALESORDERITEMS_SALES_ORDER_ID_FKEY, Keys.SALESORDERITEMS__SALESORDERITEMS_INVENTORY_ITEM_ID_FKEY, Keys.SALESORDERITEMS__SALESORDERITEMS_SERVICE_PRODUCT_ID_FKEY);
    }

    private transient SalesordersPath _salesorders;

    /**
     * Get the implicit join path to the <code>public.salesorders</code> table.
     */
    public SalesordersPath salesorders() {
        if (_salesorders == null)
            _salesorders = new SalesordersPath(this, Keys.SALESORDERITEMS__SALESORDERITEMS_SALES_ORDER_ID_FKEY, null);

        return _salesorders;
    }

    private transient InventoryitemsPath _inventoryitems;

    /**
     * Get the implicit join path to the <code>public.inventoryitems</code>
     * table.
     */
    public InventoryitemsPath inventoryitems() {
        if (_inventoryitems == null)
            _inventoryitems = new InventoryitemsPath(this, Keys.SALESORDERITEMS__SALESORDERITEMS_INVENTORY_ITEM_ID_FKEY, null);

        return _inventoryitems;
    }

    private transient ProductsPath _products;

    /**
     * Get the implicit join path to the <code>public.products</code> table.
     */
    public ProductsPath products() {
        if (_products == null)
            _products = new ProductsPath(this, Keys.SALESORDERITEMS__SALESORDERITEMS_SERVICE_PRODUCT_ID_FKEY, null);

        return _products;
    }

    @Override
    public List<Check<SalesorderitemsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("chk_item_link"), "((((inventory_item_id IS NOT NULL) AND (service_product_id IS NULL)) OR ((inventory_item_id IS NULL) AND (service_product_id IS NOT NULL))))", true),
            Internal.createCheck(this, DSL.name("salesorderitems_quantity_check"), "((quantity > 0))", true)
        );
    }

    @Override
    public Salesorderitems as(String alias) {
        return new Salesorderitems(DSL.name(alias), this);
    }

    @Override
    public Salesorderitems as(Name alias) {
        return new Salesorderitems(alias, this);
    }

    @Override
    public Salesorderitems as(Table<?> alias) {
        return new Salesorderitems(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Salesorderitems rename(String name) {
        return new Salesorderitems(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Salesorderitems rename(Name name) {
        return new Salesorderitems(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Salesorderitems rename(Table<?> name) {
        return new Salesorderitems(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Salesorderitems where(Condition condition) {
        return new Salesorderitems(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Salesorderitems where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Salesorderitems where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Salesorderitems where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Salesorderitems where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Salesorderitems where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Salesorderitems where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Salesorderitems where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Salesorderitems whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Salesorderitems whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
