/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.records.LowstockitemsviewRecord;

import java.math.BigDecimal;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Lowstockitemsview extends TableImpl<LowstockitemsviewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lowstockitemsview</code>
     */
    public static final Lowstockitemsview LOWSTOCKITEMSVIEW = new Lowstockitemsview();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LowstockitemsviewRecord> getRecordType() {
        return LowstockitemsviewRecord.class;
    }

    /**
     * The column <code>public.lowstockitemsview.inventory_item_id</code>.
     */
    public final TableField<LowstockitemsviewRecord, Integer> INVENTORY_ITEM_ID = createField(DSL.name("inventory_item_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lowstockitemsview.product_code</code>.
     */
    public final TableField<LowstockitemsviewRecord, String> PRODUCT_CODE = createField(DSL.name("product_code"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.lowstockitemsview.product_name_en</code>.
     */
    public final TableField<LowstockitemsviewRecord, String> PRODUCT_NAME_EN = createField(DSL.name("product_name_en"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.lowstockitemsview.product_name_ar</code>.
     */
    public final TableField<LowstockitemsviewRecord, String> PRODUCT_NAME_AR = createField(DSL.name("product_name_ar"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.lowstockitemsview.category_name_en</code>.
     */
    public final TableField<LowstockitemsviewRecord, String> CATEGORY_NAME_EN = createField(DSL.name("category_name_en"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.lowstockitemsview.category_name_ar</code>.
     */
    public final TableField<LowstockitemsviewRecord, String> CATEGORY_NAME_AR = createField(DSL.name("category_name_ar"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.lowstockitemsview.brand_name</code>.
     */
    public final TableField<LowstockitemsviewRecord, String> BRAND_NAME = createField(DSL.name("brand_name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.lowstockitemsview.item_specific_name_en</code>.
     */
    public final TableField<LowstockitemsviewRecord, String> ITEM_SPECIFIC_NAME_EN = createField(DSL.name("item_specific_name_en"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.lowstockitemsview.item_specific_name_ar</code>.
     */
    public final TableField<LowstockitemsviewRecord, String> ITEM_SPECIFIC_NAME_AR = createField(DSL.name("item_specific_name_ar"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.lowstockitemsview.attributes</code>.
     */
    public final TableField<LowstockitemsviewRecord, JSONB> ATTRIBUTES = createField(DSL.name("attributes"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.lowstockitemsview.quantity_on_hand</code>.
     */
    public final TableField<LowstockitemsviewRecord, Integer> QUANTITY_ON_HAND = createField(DSL.name("quantity_on_hand"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lowstockitemsview.selling_price</code>.
     */
    public final TableField<LowstockitemsviewRecord, BigDecimal> SELLING_PRICE = createField(DSL.name("selling_price"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>public.lowstockitemsview.cost_price</code>.
     */
    public final TableField<LowstockitemsviewRecord, BigDecimal> COST_PRICE = createField(DSL.name("cost_price"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>public.lowstockitemsview.total_cost_value</code>.
     */
    public final TableField<LowstockitemsviewRecord, BigDecimal> TOTAL_COST_VALUE = createField(DSL.name("total_cost_value"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.lowstockitemsview.total_selling_value</code>.
     */
    public final TableField<LowstockitemsviewRecord, BigDecimal> TOTAL_SELLING_VALUE = createField(DSL.name("total_selling_value"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.lowstockitemsview.min_stock_level</code>.
     */
    public final TableField<LowstockitemsviewRecord, Integer> MIN_STOCK_LEVEL = createField(DSL.name("min_stock_level"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lowstockitemsview.unit_of_measure</code>.
     */
    public final TableField<LowstockitemsviewRecord, String> UNIT_OF_MEASURE = createField(DSL.name("unit_of_measure"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.lowstockitemsview.is_active</code>.
     */
    public final TableField<LowstockitemsviewRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.BOOLEAN, this, "");

    private Lowstockitemsview(Name alias, Table<LowstockitemsviewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Lowstockitemsview(Name alias, Table<LowstockitemsviewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "lowstockitemsview" as  SELECT inventory_item_id,
          product_code,
          product_name_en,
          product_name_ar,
          category_name_en,
          category_name_ar,
          brand_name,
          item_specific_name_en,
          item_specific_name_ar,
          attributes,
          quantity_on_hand,
          selling_price,
          cost_price,
          total_cost_value,
          total_selling_value,
          min_stock_level,
          unit_of_measure,
          is_active
         FROM inventorysummaryview
        WHERE ((quantity_on_hand <= min_stock_level) AND (is_active = true));
        """), where);
    }

    /**
     * Create an aliased <code>public.lowstockitemsview</code> table reference
     */
    public Lowstockitemsview(String alias) {
        this(DSL.name(alias), LOWSTOCKITEMSVIEW);
    }

    /**
     * Create an aliased <code>public.lowstockitemsview</code> table reference
     */
    public Lowstockitemsview(Name alias) {
        this(alias, LOWSTOCKITEMSVIEW);
    }

    /**
     * Create a <code>public.lowstockitemsview</code> table reference
     */
    public Lowstockitemsview() {
        this(DSL.name("lowstockitemsview"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Lowstockitemsview as(String alias) {
        return new Lowstockitemsview(DSL.name(alias), this);
    }

    @Override
    public Lowstockitemsview as(Name alias) {
        return new Lowstockitemsview(alias, this);
    }

    @Override
    public Lowstockitemsview as(Table<?> alias) {
        return new Lowstockitemsview(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lowstockitemsview rename(String name) {
        return new Lowstockitemsview(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lowstockitemsview rename(Name name) {
        return new Lowstockitemsview(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lowstockitemsview rename(Table<?> name) {
        return new Lowstockitemsview(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lowstockitemsview where(Condition condition) {
        return new Lowstockitemsview(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lowstockitemsview where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lowstockitemsview where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lowstockitemsview where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lowstockitemsview where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lowstockitemsview where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lowstockitemsview where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lowstockitemsview where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lowstockitemsview whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lowstockitemsview whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
