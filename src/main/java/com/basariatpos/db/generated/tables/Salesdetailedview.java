/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.records.SalesdetailedviewRecord;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Salesdetailedview extends TableImpl<SalesdetailedviewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.salesdetailedview</code>
     */
    public static final Salesdetailedview SALESDETAILEDVIEW = new Salesdetailedview();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SalesdetailedviewRecord> getRecordType() {
        return SalesdetailedviewRecord.class;
    }

    /**
     * The column <code>public.salesdetailedview.sales_order_id</code>.
     */
    public final TableField<SalesdetailedviewRecord, Integer> SALES_ORDER_ID = createField(DSL.name("sales_order_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.salesdetailedview.order_date</code>.
     */
    public final TableField<SalesdetailedviewRecord, OffsetDateTime> ORDER_DATE = createField(DSL.name("order_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.salesdetailedview.system_patient_id</code>.
     */
    public final TableField<SalesdetailedviewRecord, String> SYSTEM_PATIENT_ID = createField(DSL.name("system_patient_id"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.salesdetailedview.patient_name</code>.
     */
    public final TableField<SalesdetailedviewRecord, String> PATIENT_NAME = createField(DSL.name("patient_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.salesdetailedview.created_by_user</code>.
     */
    public final TableField<SalesdetailedviewRecord, String> CREATED_BY_USER = createField(DSL.name("created_by_user"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.salesdetailedview.shift_id</code>.
     */
    public final TableField<SalesdetailedviewRecord, Integer> SHIFT_ID = createField(DSL.name("shift_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.salesdetailedview.shift_user</code>.
     */
    public final TableField<SalesdetailedviewRecord, String> SHIFT_USER = createField(DSL.name("shift_user"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.salesdetailedview.order_status</code>.
     */
    public final TableField<SalesdetailedviewRecord, String> ORDER_STATUS = createField(DSL.name("order_status"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.salesdetailedview.so_item_id</code>.
     */
    public final TableField<SalesdetailedviewRecord, Integer> SO_ITEM_ID = createField(DSL.name("so_item_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.salesdetailedview.item_description</code>.
     */
    public final TableField<SalesdetailedviewRecord, String> ITEM_DESCRIPTION = createField(DSL.name("item_description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.salesdetailedview.master_product_name_en</code>.
     */
    public final TableField<SalesdetailedviewRecord, String> MASTER_PRODUCT_NAME_EN = createField(DSL.name("master_product_name_en"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.salesdetailedview.master_product_name_ar</code>.
     */
    public final TableField<SalesdetailedviewRecord, String> MASTER_PRODUCT_NAME_AR = createField(DSL.name("master_product_name_ar"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.salesdetailedview.category_en</code>.
     */
    public final TableField<SalesdetailedviewRecord, String> CATEGORY_EN = createField(DSL.name("category_en"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.salesdetailedview.category_ar</code>.
     */
    public final TableField<SalesdetailedviewRecord, String> CATEGORY_AR = createField(DSL.name("category_ar"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.salesdetailedview.quantity</code>.
     */
    public final TableField<SalesdetailedviewRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.salesdetailedview.unit_price</code>.
     */
    public final TableField<SalesdetailedviewRecord, BigDecimal> UNIT_PRICE = createField(DSL.name("unit_price"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>public.salesdetailedview.item_subtotal</code>.
     */
    public final TableField<SalesdetailedviewRecord, BigDecimal> ITEM_SUBTOTAL = createField(DSL.name("item_subtotal"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>public.salesdetailedview.brand_name</code>.
     */
    public final TableField<SalesdetailedviewRecord, String> BRAND_NAME = createField(DSL.name("brand_name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.salesdetailedview.item_attributes</code>.
     */
    public final TableField<SalesdetailedviewRecord, JSONB> ITEM_ATTRIBUTES = createField(DSL.name("item_attributes"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.salesdetailedview.item_cost_price</code>.
     */
    public final TableField<SalesdetailedviewRecord, BigDecimal> ITEM_COST_PRICE = createField(DSL.name("item_cost_price"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.salesdetailedview.item_profit_on_item</code>.
     */
    public final TableField<SalesdetailedviewRecord, BigDecimal> ITEM_PROFIT_ON_ITEM = createField(DSL.name("item_profit_on_item"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.salesdetailedview.order_subtotal</code>.
     */
    public final TableField<SalesdetailedviewRecord, BigDecimal> ORDER_SUBTOTAL = createField(DSL.name("order_subtotal"), SQLDataType.NUMERIC(12, 2), this, "");

    /**
     * The column <code>public.salesdetailedview.order_discount</code>.
     */
    public final TableField<SalesdetailedviewRecord, BigDecimal> ORDER_DISCOUNT = createField(DSL.name("order_discount"), SQLDataType.NUMERIC(12, 2), this, "");

    /**
     * The column <code>public.salesdetailedview.order_total</code>.
     */
    public final TableField<SalesdetailedviewRecord, BigDecimal> ORDER_TOTAL = createField(DSL.name("order_total"), SQLDataType.NUMERIC(12, 2), this, "");

    /**
     * The column <code>public.salesdetailedview.order_amount_paid</code>.
     */
    public final TableField<SalesdetailedviewRecord, BigDecimal> ORDER_AMOUNT_PAID = createField(DSL.name("order_amount_paid"), SQLDataType.NUMERIC(12, 2), this, "");

    /**
     * The column <code>public.salesdetailedview.order_balance_due</code>.
     */
    public final TableField<SalesdetailedviewRecord, BigDecimal> ORDER_BALANCE_DUE = createField(DSL.name("order_balance_due"), SQLDataType.NUMERIC(12, 2), this, "");

    private Salesdetailedview(Name alias, Table<SalesdetailedviewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Salesdetailedview(Name alias, Table<SalesdetailedviewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "salesdetailedview" as  SELECT so.sales_order_id,
         so.order_date,
         p.system_patient_id,
         p.full_name AS patient_name,
         u.full_name AS created_by_user,
         s.shift_id,
         us_shift.username AS shift_user,
         so.status AS order_status,
         soi.so_item_id,
         soi.description AS item_description,
         prod.product_name_en AS master_product_name_en,
         prod.product_name_ar AS master_product_name_ar,
         pc.category_name_en AS category_en,
         pc.category_name_ar AS category_ar,
         soi.quantity,
         soi.unit_price,
         soi.item_subtotal,
         inv.brand_name,
         inv.attributes AS item_attributes,
         COALESCE(inv.cost_price, (0)::numeric) AS item_cost_price,
         (soi.item_subtotal - ((soi.quantity)::numeric * COALESCE(inv.cost_price, (0)::numeric))) AS item_profit_on_item,
         so.subtotal_amount AS order_subtotal,
         so.discount_amount AS order_discount,
         so.total_amount AS order_total,
         so.amount_paid AS order_amount_paid,
         so.balance_due AS order_balance_due
        FROM ((((((((salesorders so
          LEFT JOIN patients p ON ((so.patient_id = p.patient_id)))
          JOIN users u ON ((so.created_by_user_id = u.user_id)))
          JOIN salesorderitems soi ON ((so.sales_order_id = soi.sales_order_id)))
          LEFT JOIN inventoryitems inv ON ((soi.inventory_item_id = inv.inventory_item_id)))
          LEFT JOIN products prod ON ((COALESCE(inv.product_id, soi.service_product_id) = prod.product_id)))
          LEFT JOIN productcategories pc ON ((prod.category_id = pc.category_id)))
          LEFT JOIN shifts s ON ((so.shift_id = s.shift_id)))
          LEFT JOIN users us_shift ON ((s.started_by_user_id = us_shift.user_id)));
        """), where);
    }

    /**
     * Create an aliased <code>public.salesdetailedview</code> table reference
     */
    public Salesdetailedview(String alias) {
        this(DSL.name(alias), SALESDETAILEDVIEW);
    }

    /**
     * Create an aliased <code>public.salesdetailedview</code> table reference
     */
    public Salesdetailedview(Name alias) {
        this(alias, SALESDETAILEDVIEW);
    }

    /**
     * Create a <code>public.salesdetailedview</code> table reference
     */
    public Salesdetailedview() {
        this(DSL.name("salesdetailedview"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Salesdetailedview as(String alias) {
        return new Salesdetailedview(DSL.name(alias), this);
    }

    @Override
    public Salesdetailedview as(Name alias) {
        return new Salesdetailedview(alias, this);
    }

    @Override
    public Salesdetailedview as(Table<?> alias) {
        return new Salesdetailedview(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Salesdetailedview rename(String name) {
        return new Salesdetailedview(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Salesdetailedview rename(Name name) {
        return new Salesdetailedview(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Salesdetailedview rename(Table<?> name) {
        return new Salesdetailedview(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Salesdetailedview where(Condition condition) {
        return new Salesdetailedview(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Salesdetailedview where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Salesdetailedview where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Salesdetailedview where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Salesdetailedview where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Salesdetailedview where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Salesdetailedview where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Salesdetailedview where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Salesdetailedview whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Salesdetailedview whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
