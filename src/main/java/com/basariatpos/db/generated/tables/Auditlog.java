/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Indexes;
import com.basariatpos.db.generated.Keys;
import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.Users.UsersPath;
import com.basariatpos.db.generated.tables.records.AuditlogRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Auditlog extends TableImpl<AuditlogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.auditlog</code>
     */
    public static final Auditlog AUDITLOG = new Auditlog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditlogRecord> getRecordType() {
        return AuditlogRecord.class;
    }

    /**
     * The column <code>public.auditlog.audit_log_id</code>.
     */
    public final TableField<AuditlogRecord, Long> AUDIT_LOG_ID = createField(DSL.name("audit_log_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.auditlog.table_name</code>.
     */
    public final TableField<AuditlogRecord, String> TABLE_NAME = createField(DSL.name("table_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.auditlog.record_pk</code>.
     */
    public final TableField<AuditlogRecord, String> RECORD_PK = createField(DSL.name("record_pk"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.auditlog.column_name</code>.
     */
    public final TableField<AuditlogRecord, String> COLUMN_NAME = createField(DSL.name("column_name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.auditlog.old_value</code>.
     */
    public final TableField<AuditlogRecord, String> OLD_VALUE = createField(DSL.name("old_value"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.auditlog.new_value</code>.
     */
    public final TableField<AuditlogRecord, String> NEW_VALUE = createField(DSL.name("new_value"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.auditlog.action_type</code>.
     */
    public final TableField<AuditlogRecord, String> ACTION_TYPE = createField(DSL.name("action_type"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.auditlog.action_timestamp</code>.
     */
    public final TableField<AuditlogRecord, OffsetDateTime> ACTION_TIMESTAMP = createField(DSL.name("action_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.auditlog.user_id</code>.
     */
    public final TableField<AuditlogRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.auditlog.details</code>.
     */
    public final TableField<AuditlogRecord, String> DETAILS = createField(DSL.name("details"), SQLDataType.CLOB, this, "");

    private Auditlog(Name alias, Table<AuditlogRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Auditlog(Name alias, Table<AuditlogRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.auditlog</code> table reference
     */
    public Auditlog(String alias) {
        this(DSL.name(alias), AUDITLOG);
    }

    /**
     * Create an aliased <code>public.auditlog</code> table reference
     */
    public Auditlog(Name alias) {
        this(alias, AUDITLOG);
    }

    /**
     * Create a <code>public.auditlog</code> table reference
     */
    public Auditlog() {
        this(DSL.name("auditlog"), null);
    }

    public <O extends Record> Auditlog(Table<O> path, ForeignKey<O, AuditlogRecord> childPath, InverseForeignKey<O, AuditlogRecord> parentPath) {
        super(path, childPath, parentPath, AUDITLOG);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AuditlogPath extends Auditlog implements Path<AuditlogRecord> {
        public <O extends Record> AuditlogPath(Table<O> path, ForeignKey<O, AuditlogRecord> childPath, InverseForeignKey<O, AuditlogRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AuditlogPath(Name alias, Table<AuditlogRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AuditlogPath as(String alias) {
            return new AuditlogPath(DSL.name(alias), this);
        }

        @Override
        public AuditlogPath as(Name alias) {
            return new AuditlogPath(alias, this);
        }

        @Override
        public AuditlogPath as(Table<?> alias) {
            return new AuditlogPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_AUDITLOG_ACTION_TIMESTAMP, Indexes.IDX_AUDITLOG_TABLE_RECORD, Indexes.IDX_AUDITLOG_USER_TIMESTAMP);
    }

    @Override
    public Identity<AuditlogRecord, Long> getIdentity() {
        return (Identity<AuditlogRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditlogRecord> getPrimaryKey() {
        return Keys.AUDITLOG_PKEY;
    }

    @Override
    public List<ForeignKey<AuditlogRecord, ?>> getReferences() {
        return Arrays.asList(Keys.AUDITLOG__AUDITLOG_USER_ID_FKEY);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.AUDITLOG__AUDITLOG_USER_ID_FKEY, null);

        return _users;
    }

    @Override
    public List<Check<AuditlogRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("auditlog_action_type_check"), "(((action_type)::text = ANY ((ARRAY['INSERT'::character varying, 'UPDATE'::character varying, 'DELETE'::character varying])::text[])))", true)
        );
    }

    @Override
    public Auditlog as(String alias) {
        return new Auditlog(DSL.name(alias), this);
    }

    @Override
    public Auditlog as(Name alias) {
        return new Auditlog(alias, this);
    }

    @Override
    public Auditlog as(Table<?> alias) {
        return new Auditlog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Auditlog rename(String name) {
        return new Auditlog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Auditlog rename(Name name) {
        return new Auditlog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Auditlog rename(Table<?> name) {
        return new Auditlog(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Auditlog where(Condition condition) {
        return new Auditlog(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Auditlog where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Auditlog where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Auditlog where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Auditlog where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Auditlog where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Auditlog where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Auditlog where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Auditlog whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Auditlog whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
