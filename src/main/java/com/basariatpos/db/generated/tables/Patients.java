/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Indexes;
import com.basariatpos.db.generated.Keys;
import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.Opticaldiagnostics.OpticaldiagnosticsPath;
import com.basariatpos.db.generated.tables.Salesorders.SalesordersPath;
import com.basariatpos.db.generated.tables.Users.UsersPath;
import com.basariatpos.db.generated.tables.records.PatientsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Patients extends TableImpl<PatientsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.patients</code>
     */
    public static final Patients PATIENTS = new Patients();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PatientsRecord> getRecordType() {
        return PatientsRecord.class;
    }

    /**
     * The column <code>public.patients.patient_id</code>.
     */
    public final TableField<PatientsRecord, Integer> PATIENT_ID = createField(DSL.name("patient_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.patients.system_patient_id</code>.
     */
    public final TableField<PatientsRecord, String> SYSTEM_PATIENT_ID = createField(DSL.name("system_patient_id"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.patients.full_name</code>.
     */
    public final TableField<PatientsRecord, String> FULL_NAME = createField(DSL.name("full_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.patients.phone_number</code>.
     */
    public final TableField<PatientsRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>public.patients.address</code>.
     */
    public final TableField<PatientsRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.patients.whatsapp_opt_in</code>.
     */
    public final TableField<PatientsRecord, Boolean> WHATSAPP_OPT_IN = createField(DSL.name("whatsapp_opt_in"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.patients.created_by_user_id</code>.
     */
    public final TableField<PatientsRecord, Integer> CREATED_BY_USER_ID = createField(DSL.name("created_by_user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.patients.created_at</code>.
     */
    public final TableField<PatientsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.patients.updated_at</code>.
     */
    public final TableField<PatientsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Patients(Name alias, Table<PatientsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Patients(Name alias, Table<PatientsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.patients</code> table reference
     */
    public Patients(String alias) {
        this(DSL.name(alias), PATIENTS);
    }

    /**
     * Create an aliased <code>public.patients</code> table reference
     */
    public Patients(Name alias) {
        this(alias, PATIENTS);
    }

    /**
     * Create a <code>public.patients</code> table reference
     */
    public Patients() {
        this(DSL.name("patients"), null);
    }

    public <O extends Record> Patients(Table<O> path, ForeignKey<O, PatientsRecord> childPath, InverseForeignKey<O, PatientsRecord> parentPath) {
        super(path, childPath, parentPath, PATIENTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PatientsPath extends Patients implements Path<PatientsRecord> {
        public <O extends Record> PatientsPath(Table<O> path, ForeignKey<O, PatientsRecord> childPath, InverseForeignKey<O, PatientsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PatientsPath(Name alias, Table<PatientsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PatientsPath as(String alias) {
            return new PatientsPath(DSL.name(alias), this);
        }

        @Override
        public PatientsPath as(Name alias) {
            return new PatientsPath(alias, this);
        }

        @Override
        public PatientsPath as(Table<?> alias) {
            return new PatientsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_PATIENTS_NAME, Indexes.IDX_PATIENTS_PHONE);
    }

    @Override
    public Identity<PatientsRecord, Integer> getIdentity() {
        return (Identity<PatientsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PatientsRecord> getPrimaryKey() {
        return Keys.PATIENTS_PKEY;
    }

    @Override
    public List<UniqueKey<PatientsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PATIENTS_SYSTEM_PATIENT_ID_KEY);
    }

    @Override
    public List<ForeignKey<PatientsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PATIENTS__PATIENTS_CREATED_BY_USER_ID_FKEY);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.PATIENTS__PATIENTS_CREATED_BY_USER_ID_FKEY, null);

        return _users;
    }

    private transient OpticaldiagnosticsPath _opticaldiagnostics;

    /**
     * Get the implicit to-many join path to the
     * <code>public.opticaldiagnostics</code> table
     */
    public OpticaldiagnosticsPath opticaldiagnostics() {
        if (_opticaldiagnostics == null)
            _opticaldiagnostics = new OpticaldiagnosticsPath(this, null, Keys.OPTICALDIAGNOSTICS__OPTICALDIAGNOSTICS_PATIENT_ID_FKEY.getInverseKey());

        return _opticaldiagnostics;
    }

    private transient SalesordersPath _salesorders;

    /**
     * Get the implicit to-many join path to the <code>public.salesorders</code>
     * table
     */
    public SalesordersPath salesorders() {
        if (_salesorders == null)
            _salesorders = new SalesordersPath(this, null, Keys.SALESORDERS__SALESORDERS_PATIENT_ID_FKEY.getInverseKey());

        return _salesorders;
    }

    @Override
    public Patients as(String alias) {
        return new Patients(DSL.name(alias), this);
    }

    @Override
    public Patients as(Name alias) {
        return new Patients(alias, this);
    }

    @Override
    public Patients as(Table<?> alias) {
        return new Patients(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Patients rename(String name) {
        return new Patients(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Patients rename(Name name) {
        return new Patients(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Patients rename(Table<?> name) {
        return new Patients(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Patients where(Condition condition) {
        return new Patients(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Patients where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Patients where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Patients where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Patients where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Patients where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Patients where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Patients where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Patients whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Patients whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
