/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Indexes;
import com.basariatpos.db.generated.Keys;
import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.Banknames.BanknamesPath;
import com.basariatpos.db.generated.tables.Salesorders.SalesordersPath;
import com.basariatpos.db.generated.tables.Shifts.ShiftsPath;
import com.basariatpos.db.generated.tables.Users.UsersPath;
import com.basariatpos.db.generated.tables.records.PaymentsRecord;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Payments extends TableImpl<PaymentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.payments</code>
     */
    public static final Payments PAYMENTS = new Payments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentsRecord> getRecordType() {
        return PaymentsRecord.class;
    }

    /**
     * The column <code>public.payments.payment_id</code>.
     */
    public final TableField<PaymentsRecord, Integer> PAYMENT_ID = createField(DSL.name("payment_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.payments.sales_order_id</code>.
     */
    public final TableField<PaymentsRecord, Integer> SALES_ORDER_ID = createField(DSL.name("sales_order_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.payments.payment_date</code>.
     */
    public final TableField<PaymentsRecord, OffsetDateTime> PAYMENT_DATE = createField(DSL.name("payment_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.payments.amount</code>.
     */
    public final TableField<PaymentsRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * The column <code>public.payments.payment_method</code>.
     */
    public final TableField<PaymentsRecord, String> PAYMENT_METHOD = createField(DSL.name("payment_method"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.payments.bank_name_id</code>.
     */
    public final TableField<PaymentsRecord, Integer> BANK_NAME_ID = createField(DSL.name("bank_name_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.payments.transaction_id</code>.
     */
    public final TableField<PaymentsRecord, String> TRANSACTION_ID = createField(DSL.name("transaction_id"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.payments.received_by_user_id</code>.
     */
    public final TableField<PaymentsRecord, Integer> RECEIVED_BY_USER_ID = createField(DSL.name("received_by_user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.payments.shift_id</code>.
     */
    public final TableField<PaymentsRecord, Integer> SHIFT_ID = createField(DSL.name("shift_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.payments.notes</code>.
     */
    public final TableField<PaymentsRecord, String> NOTES = createField(DSL.name("notes"), SQLDataType.CLOB, this, "");

    private Payments(Name alias, Table<PaymentsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Payments(Name alias, Table<PaymentsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.payments</code> table reference
     */
    public Payments(String alias) {
        this(DSL.name(alias), PAYMENTS);
    }

    /**
     * Create an aliased <code>public.payments</code> table reference
     */
    public Payments(Name alias) {
        this(alias, PAYMENTS);
    }

    /**
     * Create a <code>public.payments</code> table reference
     */
    public Payments() {
        this(DSL.name("payments"), null);
    }

    public <O extends Record> Payments(Table<O> path, ForeignKey<O, PaymentsRecord> childPath, InverseForeignKey<O, PaymentsRecord> parentPath) {
        super(path, childPath, parentPath, PAYMENTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PaymentsPath extends Payments implements Path<PaymentsRecord> {
        public <O extends Record> PaymentsPath(Table<O> path, ForeignKey<O, PaymentsRecord> childPath, InverseForeignKey<O, PaymentsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PaymentsPath(Name alias, Table<PaymentsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PaymentsPath as(String alias) {
            return new PaymentsPath(DSL.name(alias), this);
        }

        @Override
        public PaymentsPath as(Name alias) {
            return new PaymentsPath(alias, this);
        }

        @Override
        public PaymentsPath as(Table<?> alias) {
            return new PaymentsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_PAYMENTS_PAYMENT_DATE, Indexes.IDX_PAYMENTS_SALESORDERID, Indexes.IDX_PAYMENTS_SHIFTID);
    }

    @Override
    public Identity<PaymentsRecord, Integer> getIdentity() {
        return (Identity<PaymentsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PaymentsRecord> getPrimaryKey() {
        return Keys.PAYMENTS_PKEY;
    }

    @Override
    public List<ForeignKey<PaymentsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PAYMENTS__PAYMENTS_SALES_ORDER_ID_FKEY, Keys.PAYMENTS__PAYMENTS_BANK_NAME_ID_FKEY, Keys.PAYMENTS__PAYMENTS_RECEIVED_BY_USER_ID_FKEY, Keys.PAYMENTS__PAYMENTS_SHIFT_ID_FKEY);
    }

    private transient SalesordersPath _salesorders;

    /**
     * Get the implicit join path to the <code>public.salesorders</code> table.
     */
    public SalesordersPath salesorders() {
        if (_salesorders == null)
            _salesorders = new SalesordersPath(this, Keys.PAYMENTS__PAYMENTS_SALES_ORDER_ID_FKEY, null);

        return _salesorders;
    }

    private transient BanknamesPath _banknames;

    /**
     * Get the implicit join path to the <code>public.banknames</code> table.
     */
    public BanknamesPath banknames() {
        if (_banknames == null)
            _banknames = new BanknamesPath(this, Keys.PAYMENTS__PAYMENTS_BANK_NAME_ID_FKEY, null);

        return _banknames;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.PAYMENTS__PAYMENTS_RECEIVED_BY_USER_ID_FKEY, null);

        return _users;
    }

    private transient ShiftsPath _shifts;

    /**
     * Get the implicit join path to the <code>public.shifts</code> table.
     */
    public ShiftsPath shifts() {
        if (_shifts == null)
            _shifts = new ShiftsPath(this, Keys.PAYMENTS__PAYMENTS_SHIFT_ID_FKEY, null);

        return _shifts;
    }

    @Override
    public List<Check<PaymentsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("chk_bank_details_payment"), "((((payment_method)::text = 'Cash'::text) OR (((payment_method)::text = 'Bank Transaction'::text) AND (bank_name_id IS NOT NULL) AND (transaction_id IS NOT NULL))))", true),
            Internal.createCheck(this, DSL.name("payments_amount_check"), "((amount > (0)::numeric))", true),
            Internal.createCheck(this, DSL.name("payments_payment_method_check"), "(((payment_method)::text = ANY ((ARRAY['Cash'::character varying, 'Bank Transaction'::character varying])::text[])))", true)
        );
    }

    @Override
    public Payments as(String alias) {
        return new Payments(DSL.name(alias), this);
    }

    @Override
    public Payments as(Name alias) {
        return new Payments(alias, this);
    }

    @Override
    public Payments as(Table<?> alias) {
        return new Payments(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Payments rename(String name) {
        return new Payments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Payments rename(Name name) {
        return new Payments(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Payments rename(Table<?> name) {
        return new Payments(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payments where(Condition condition) {
        return new Payments(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payments where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payments where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payments where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Payments where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Payments where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Payments where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Payments where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payments whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payments whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
