/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.records.ShiftreportdetailedtransactionsviewRecord;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Shiftreportdetailedtransactionsview extends TableImpl<ShiftreportdetailedtransactionsviewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.shiftreportdetailedtransactionsview</code>
     */
    public static final Shiftreportdetailedtransactionsview SHIFTREPORTDETAILEDTRANSACTIONSVIEW = new Shiftreportdetailedtransactionsview();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShiftreportdetailedtransactionsviewRecord> getRecordType() {
        return ShiftreportdetailedtransactionsviewRecord.class;
    }

    /**
     * The column
     * <code>public.shiftreportdetailedtransactionsview.shift_id</code>.
     */
    public final TableField<ShiftreportdetailedtransactionsviewRecord, Integer> SHIFT_ID = createField(DSL.name("shift_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>public.shiftreportdetailedtransactionsview.transaction_group</code>.
     */
    public final TableField<ShiftreportdetailedtransactionsviewRecord, String> TRANSACTION_GROUP = createField(DSL.name("transaction_group"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.shiftreportdetailedtransactionsview.transaction_type</code>.
     */
    public final TableField<ShiftreportdetailedtransactionsviewRecord, String> TRANSACTION_TYPE = createField(DSL.name("transaction_type"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.shiftreportdetailedtransactionsview.reference_id</code>.
     */
    public final TableField<ShiftreportdetailedtransactionsviewRecord, Integer> REFERENCE_ID = createField(DSL.name("reference_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>public.shiftreportdetailedtransactionsview.transaction_sub_id</code>.
     */
    public final TableField<ShiftreportdetailedtransactionsviewRecord, Integer> TRANSACTION_SUB_ID = createField(DSL.name("transaction_sub_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>public.shiftreportdetailedtransactionsview.transaction_timestamp</code>.
     */
    public final TableField<ShiftreportdetailedtransactionsviewRecord, OffsetDateTime> TRANSACTION_TIMESTAMP = createField(DSL.name("transaction_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>public.shiftreportdetailedtransactionsview.description</code>.
     */
    public final TableField<ShiftreportdetailedtransactionsviewRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "");

    /**
     * The column
     * <code>public.shiftreportdetailedtransactionsview.quantity</code>.
     */
    public final TableField<ShiftreportdetailedtransactionsviewRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>public.shiftreportdetailedtransactionsview.unit_price</code>.
     */
    public final TableField<ShiftreportdetailedtransactionsviewRecord, BigDecimal> UNIT_PRICE = createField(DSL.name("unit_price"), SQLDataType.NUMERIC, this, "");

    /**
     * The column
     * <code>public.shiftreportdetailedtransactionsview.amount</code>.
     */
    public final TableField<ShiftreportdetailedtransactionsviewRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC, this, "");

    /**
     * The column
     * <code>public.shiftreportdetailedtransactionsview.payment_method</code>.
     */
    public final TableField<ShiftreportdetailedtransactionsviewRecord, String> PAYMENT_METHOD = createField(DSL.name("payment_method"), SQLDataType.VARCHAR, this, "");

    /**
     * The column
     * <code>public.shiftreportdetailedtransactionsview.patient_name</code>.
     */
    public final TableField<ShiftreportdetailedtransactionsviewRecord, String> PATIENT_NAME = createField(DSL.name("patient_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column
     * <code>public.shiftreportdetailedtransactionsview.user_performing</code>.
     */
    public final TableField<ShiftreportdetailedtransactionsviewRecord, String> USER_PERFORMING = createField(DSL.name("user_performing"), SQLDataType.VARCHAR(100), this, "");

    private Shiftreportdetailedtransactionsview(Name alias, Table<ShiftreportdetailedtransactionsviewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Shiftreportdetailedtransactionsview(Name alias, Table<ShiftreportdetailedtransactionsviewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
         create view "shiftreportdetailedtransactionsview" as  SELECT s.shift_id,
            'SALES_ITEM'::text AS transaction_group,
            'Sale Item'::text AS transaction_type,
            so.sales_order_id AS reference_id,
            soi.so_item_id AS transaction_sub_id,
            so.order_date AS transaction_timestamp,
            prod.product_name_en AS description,
            soi.quantity,
            soi.unit_price,
            soi.item_subtotal AS amount,
            NULL::character varying AS payment_method,
            pat.full_name AS patient_name,
            u.username AS user_performing
           FROM ((((((shifts s
             JOIN salesorders so ON ((s.shift_id = so.shift_id)))
             JOIN users u ON ((so.created_by_user_id = u.user_id)))
             JOIN salesorderitems soi ON ((so.sales_order_id = soi.sales_order_id)))
             LEFT JOIN inventoryitems inv ON ((soi.inventory_item_id = inv.inventory_item_id)))
             LEFT JOIN products prod ON ((COALESCE(inv.product_id, soi.service_product_id) = prod.product_id)))
             LEFT JOIN patients pat ON ((so.patient_id = pat.patient_id)))
        UNION ALL
         SELECT s.shift_id,
            'PAYMENT'::text AS transaction_group,
            'Payment Received'::text AS transaction_type,
            pay.sales_order_id AS reference_id,
            pay.payment_id AS transaction_sub_id,
            pay.payment_date AS transaction_timestamp,
            (('Payment for Order ID: '::text || pay.sales_order_id) || COALESCE((' by '::text || (pat.full_name)::text), ''::text)) AS description,
            NULL::integer AS quantity,
            NULL::numeric AS unit_price,
            pay.amount,
            pay.payment_method,
            pat.full_name AS patient_name,
            u.username AS user_performing
           FROM ((((shifts s
             JOIN payments pay ON ((s.shift_id = pay.shift_id)))
             JOIN users u ON ((pay.received_by_user_id = u.user_id)))
             LEFT JOIN salesorders so_pay ON ((pay.sales_order_id = so_pay.sales_order_id)))
             LEFT JOIN patients pat ON ((so_pay.patient_id = pat.patient_id)))
        UNION ALL
         SELECT s.shift_id,
            'EXPENSE'::text AS transaction_group,
            'Expense Paid (Cash)'::text AS transaction_type,
            e.expense_id AS reference_id,
            NULL::integer AS transaction_sub_id,
            e.created_at AS transaction_timestamp,
            (((ec.category_name_en)::text || ': '::text) || e.description) AS description,
            NULL::integer AS quantity,
            NULL::numeric AS unit_price,
            (- e.amount) AS amount,
            e.payment_method,
            NULL::character varying AS patient_name,
            u.username AS user_performing
           FROM (((shifts s
             JOIN expenses e ON ((s.shift_id = e.shift_id)))
             JOIN users u ON ((e.created_by_user_id = u.user_id)))
             JOIN expensecategories ec ON ((e.expense_category_id = ec.expense_category_id)))
          WHERE ((e.payment_method)::text = 'Cash'::text);
        """), where);
    }

    /**
     * Create an aliased <code>public.shiftreportdetailedtransactionsview</code>
     * table reference
     */
    public Shiftreportdetailedtransactionsview(String alias) {
        this(DSL.name(alias), SHIFTREPORTDETAILEDTRANSACTIONSVIEW);
    }

    /**
     * Create an aliased <code>public.shiftreportdetailedtransactionsview</code>
     * table reference
     */
    public Shiftreportdetailedtransactionsview(Name alias) {
        this(alias, SHIFTREPORTDETAILEDTRANSACTIONSVIEW);
    }

    /**
     * Create a <code>public.shiftreportdetailedtransactionsview</code> table
     * reference
     */
    public Shiftreportdetailedtransactionsview() {
        this(DSL.name("shiftreportdetailedtransactionsview"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Shiftreportdetailedtransactionsview as(String alias) {
        return new Shiftreportdetailedtransactionsview(DSL.name(alias), this);
    }

    @Override
    public Shiftreportdetailedtransactionsview as(Name alias) {
        return new Shiftreportdetailedtransactionsview(alias, this);
    }

    @Override
    public Shiftreportdetailedtransactionsview as(Table<?> alias) {
        return new Shiftreportdetailedtransactionsview(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Shiftreportdetailedtransactionsview rename(String name) {
        return new Shiftreportdetailedtransactionsview(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Shiftreportdetailedtransactionsview rename(Name name) {
        return new Shiftreportdetailedtransactionsview(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Shiftreportdetailedtransactionsview rename(Table<?> name) {
        return new Shiftreportdetailedtransactionsview(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shiftreportdetailedtransactionsview where(Condition condition) {
        return new Shiftreportdetailedtransactionsview(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shiftreportdetailedtransactionsview where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shiftreportdetailedtransactionsview where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shiftreportdetailedtransactionsview where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shiftreportdetailedtransactionsview where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shiftreportdetailedtransactionsview where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shiftreportdetailedtransactionsview where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shiftreportdetailedtransactionsview where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shiftreportdetailedtransactionsview whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shiftreportdetailedtransactionsview whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
