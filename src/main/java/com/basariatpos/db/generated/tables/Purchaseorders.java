/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Keys;
import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.Purchaseorderitems.PurchaseorderitemsPath;
import com.basariatpos.db.generated.tables.Users.UsersPath;
import com.basariatpos.db.generated.tables.records.PurchaseordersRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Purchaseorders extends TableImpl<PurchaseordersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.purchaseorders</code>
     */
    public static final Purchaseorders PURCHASEORDERS = new Purchaseorders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PurchaseordersRecord> getRecordType() {
        return PurchaseordersRecord.class;
    }

    /**
     * The column <code>public.purchaseorders.purchase_order_id</code>.
     */
    public final TableField<PurchaseordersRecord, Integer> PURCHASE_ORDER_ID = createField(DSL.name("purchase_order_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.purchaseorders.order_date</code>.
     */
    public final TableField<PurchaseordersRecord, LocalDate> ORDER_DATE = createField(DSL.name("order_date"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_DATE"), SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>public.purchaseorders.supplier_name</code>.
     */
    public final TableField<PurchaseordersRecord, String> SUPPLIER_NAME = createField(DSL.name("supplier_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.purchaseorders.total_amount</code>.
     */
    public final TableField<PurchaseordersRecord, BigDecimal> TOTAL_AMOUNT = createField(DSL.name("total_amount"), SQLDataType.NUMERIC(12, 2).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.purchaseorders.status</code>.
     */
    public final TableField<PurchaseordersRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.purchaseorders.created_by_user_id</code>.
     */
    public final TableField<PurchaseordersRecord, Integer> CREATED_BY_USER_ID = createField(DSL.name("created_by_user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.purchaseorders.created_at</code>.
     */
    public final TableField<PurchaseordersRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.purchaseorders.updated_at</code>.
     */
    public final TableField<PurchaseordersRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Purchaseorders(Name alias, Table<PurchaseordersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Purchaseorders(Name alias, Table<PurchaseordersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.purchaseorders</code> table reference
     */
    public Purchaseorders(String alias) {
        this(DSL.name(alias), PURCHASEORDERS);
    }

    /**
     * Create an aliased <code>public.purchaseorders</code> table reference
     */
    public Purchaseorders(Name alias) {
        this(alias, PURCHASEORDERS);
    }

    /**
     * Create a <code>public.purchaseorders</code> table reference
     */
    public Purchaseorders() {
        this(DSL.name("purchaseorders"), null);
    }

    public <O extends Record> Purchaseorders(Table<O> path, ForeignKey<O, PurchaseordersRecord> childPath, InverseForeignKey<O, PurchaseordersRecord> parentPath) {
        super(path, childPath, parentPath, PURCHASEORDERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PurchaseordersPath extends Purchaseorders implements Path<PurchaseordersRecord> {
        public <O extends Record> PurchaseordersPath(Table<O> path, ForeignKey<O, PurchaseordersRecord> childPath, InverseForeignKey<O, PurchaseordersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PurchaseordersPath(Name alias, Table<PurchaseordersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PurchaseordersPath as(String alias) {
            return new PurchaseordersPath(DSL.name(alias), this);
        }

        @Override
        public PurchaseordersPath as(Name alias) {
            return new PurchaseordersPath(alias, this);
        }

        @Override
        public PurchaseordersPath as(Table<?> alias) {
            return new PurchaseordersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PurchaseordersRecord, Integer> getIdentity() {
        return (Identity<PurchaseordersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PurchaseordersRecord> getPrimaryKey() {
        return Keys.PURCHASEORDERS_PKEY;
    }

    @Override
    public List<ForeignKey<PurchaseordersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PURCHASEORDERS__PURCHASEORDERS_CREATED_BY_USER_ID_FKEY);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.PURCHASEORDERS__PURCHASEORDERS_CREATED_BY_USER_ID_FKEY, null);

        return _users;
    }

    private transient PurchaseorderitemsPath _purchaseorderitems;

    /**
     * Get the implicit to-many join path to the
     * <code>public.purchaseorderitems</code> table
     */
    public PurchaseorderitemsPath purchaseorderitems() {
        if (_purchaseorderitems == null)
            _purchaseorderitems = new PurchaseorderitemsPath(this, null, Keys.PURCHASEORDERITEMS__PURCHASEORDERITEMS_PURCHASE_ORDER_ID_FKEY.getInverseKey());

        return _purchaseorderitems;
    }

    @Override
    public List<Check<PurchaseordersRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("purchaseorders_status_check"), "(((status)::text = ANY ((ARRAY['Pending'::character varying, 'Received'::character varying, 'Cancelled'::character varying])::text[])))", true)
        );
    }

    @Override
    public Purchaseorders as(String alias) {
        return new Purchaseorders(DSL.name(alias), this);
    }

    @Override
    public Purchaseorders as(Name alias) {
        return new Purchaseorders(alias, this);
    }

    @Override
    public Purchaseorders as(Table<?> alias) {
        return new Purchaseorders(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchaseorders rename(String name) {
        return new Purchaseorders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchaseorders rename(Name name) {
        return new Purchaseorders(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchaseorders rename(Table<?> name) {
        return new Purchaseorders(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Purchaseorders where(Condition condition) {
        return new Purchaseorders(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Purchaseorders where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Purchaseorders where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Purchaseorders where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Purchaseorders where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Purchaseorders where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Purchaseorders where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Purchaseorders where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Purchaseorders whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Purchaseorders whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
