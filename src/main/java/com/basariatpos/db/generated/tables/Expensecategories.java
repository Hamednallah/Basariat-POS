/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Keys;
import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.Expenses.ExpensesPath;
import com.basariatpos.db.generated.tables.records.ExpensecategoriesRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Expensecategories extends TableImpl<ExpensecategoriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.expensecategories</code>
     */
    public static final Expensecategories EXPENSECATEGORIES = new Expensecategories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExpensecategoriesRecord> getRecordType() {
        return ExpensecategoriesRecord.class;
    }

    /**
     * The column <code>public.expensecategories.expense_category_id</code>.
     */
    public final TableField<ExpensecategoriesRecord, Integer> EXPENSE_CATEGORY_ID = createField(DSL.name("expense_category_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.expensecategories.category_name_en</code>.
     */
    public final TableField<ExpensecategoriesRecord, String> CATEGORY_NAME_EN = createField(DSL.name("category_name_en"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.expensecategories.category_name_ar</code>.
     */
    public final TableField<ExpensecategoriesRecord, String> CATEGORY_NAME_AR = createField(DSL.name("category_name_ar"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.expensecategories.is_active</code>.
     */
    public final TableField<ExpensecategoriesRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    private Expensecategories(Name alias, Table<ExpensecategoriesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Expensecategories(Name alias, Table<ExpensecategoriesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.expensecategories</code> table reference
     */
    public Expensecategories(String alias) {
        this(DSL.name(alias), EXPENSECATEGORIES);
    }

    /**
     * Create an aliased <code>public.expensecategories</code> table reference
     */
    public Expensecategories(Name alias) {
        this(alias, EXPENSECATEGORIES);
    }

    /**
     * Create a <code>public.expensecategories</code> table reference
     */
    public Expensecategories() {
        this(DSL.name("expensecategories"), null);
    }

    public <O extends Record> Expensecategories(Table<O> path, ForeignKey<O, ExpensecategoriesRecord> childPath, InverseForeignKey<O, ExpensecategoriesRecord> parentPath) {
        super(path, childPath, parentPath, EXPENSECATEGORIES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ExpensecategoriesPath extends Expensecategories implements Path<ExpensecategoriesRecord> {
        public <O extends Record> ExpensecategoriesPath(Table<O> path, ForeignKey<O, ExpensecategoriesRecord> childPath, InverseForeignKey<O, ExpensecategoriesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ExpensecategoriesPath(Name alias, Table<ExpensecategoriesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ExpensecategoriesPath as(String alias) {
            return new ExpensecategoriesPath(DSL.name(alias), this);
        }

        @Override
        public ExpensecategoriesPath as(Name alias) {
            return new ExpensecategoriesPath(alias, this);
        }

        @Override
        public ExpensecategoriesPath as(Table<?> alias) {
            return new ExpensecategoriesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ExpensecategoriesRecord, Integer> getIdentity() {
        return (Identity<ExpensecategoriesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExpensecategoriesRecord> getPrimaryKey() {
        return Keys.EXPENSECATEGORIES_PKEY;
    }

    @Override
    public List<UniqueKey<ExpensecategoriesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.EXPENSECATEGORIES_CATEGORY_NAME_EN_KEY, Keys.EXPENSECATEGORIES_CATEGORY_NAME_AR_KEY);
    }

    private transient ExpensesPath _expenses;

    /**
     * Get the implicit to-many join path to the <code>public.expenses</code>
     * table
     */
    public ExpensesPath expenses() {
        if (_expenses == null)
            _expenses = new ExpensesPath(this, null, Keys.EXPENSES__EXPENSES_EXPENSE_CATEGORY_ID_FKEY.getInverseKey());

        return _expenses;
    }

    @Override
    public Expensecategories as(String alias) {
        return new Expensecategories(DSL.name(alias), this);
    }

    @Override
    public Expensecategories as(Name alias) {
        return new Expensecategories(alias, this);
    }

    @Override
    public Expensecategories as(Table<?> alias) {
        return new Expensecategories(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Expensecategories rename(String name) {
        return new Expensecategories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Expensecategories rename(Name name) {
        return new Expensecategories(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Expensecategories rename(Table<?> name) {
        return new Expensecategories(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Expensecategories where(Condition condition) {
        return new Expensecategories(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Expensecategories where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Expensecategories where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Expensecategories where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Expensecategories where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Expensecategories where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Expensecategories where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Expensecategories where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Expensecategories whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Expensecategories whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
