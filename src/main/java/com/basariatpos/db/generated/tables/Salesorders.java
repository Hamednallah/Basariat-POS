/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Indexes;
import com.basariatpos.db.generated.Keys;
import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.Appointments.AppointmentsPath;
import com.basariatpos.db.generated.tables.Patients.PatientsPath;
import com.basariatpos.db.generated.tables.Payments.PaymentsPath;
import com.basariatpos.db.generated.tables.Salesorderitems.SalesorderitemsPath;
import com.basariatpos.db.generated.tables.Shifts.ShiftsPath;
import com.basariatpos.db.generated.tables.Users.UsersPath;
import com.basariatpos.db.generated.tables.records.SalesordersRecord;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Salesorders extends TableImpl<SalesordersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.salesorders</code>
     */
    public static final Salesorders SALESORDERS = new Salesorders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SalesordersRecord> getRecordType() {
        return SalesordersRecord.class;
    }

    /**
     * The column <code>public.salesorders.sales_order_id</code>.
     */
    public final TableField<SalesordersRecord, Integer> SALES_ORDER_ID = createField(DSL.name("sales_order_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.salesorders.patient_id</code>.
     */
    public final TableField<SalesordersRecord, Integer> PATIENT_ID = createField(DSL.name("patient_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.salesorders.order_date</code>.
     */
    public final TableField<SalesordersRecord, OffsetDateTime> ORDER_DATE = createField(DSL.name("order_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.salesorders.status</code>.
     */
    public final TableField<SalesordersRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.salesorders.subtotal_amount</code>.
     */
    public final TableField<SalesordersRecord, BigDecimal> SUBTOTAL_AMOUNT = createField(DSL.name("subtotal_amount"), SQLDataType.NUMERIC(12, 2).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.salesorders.discount_amount</code>.
     */
    public final TableField<SalesordersRecord, BigDecimal> DISCOUNT_AMOUNT = createField(DSL.name("discount_amount"), SQLDataType.NUMERIC(12, 2).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.salesorders.total_amount</code>.
     */
    public final TableField<SalesordersRecord, BigDecimal> TOTAL_AMOUNT = createField(DSL.name("total_amount"), SQLDataType.NUMERIC(12, 2), this, "");

    /**
     * The column <code>public.salesorders.amount_paid</code>.
     */
    public final TableField<SalesordersRecord, BigDecimal> AMOUNT_PAID = createField(DSL.name("amount_paid"), SQLDataType.NUMERIC(12, 2).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.salesorders.balance_due</code>.
     */
    public final TableField<SalesordersRecord, BigDecimal> BALANCE_DUE = createField(DSL.name("balance_due"), SQLDataType.NUMERIC(12, 2), this, "");

    /**
     * The column <code>public.salesorders.created_by_user_id</code>.
     */
    public final TableField<SalesordersRecord, Integer> CREATED_BY_USER_ID = createField(DSL.name("created_by_user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.salesorders.shift_id</code>.
     */
    public final TableField<SalesordersRecord, Integer> SHIFT_ID = createField(DSL.name("shift_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.salesorders.delivery_appointment_id</code>.
     */
    public final TableField<SalesordersRecord, Integer> DELIVERY_APPOINTMENT_ID = createField(DSL.name("delivery_appointment_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.salesorders.remarks</code>.
     */
    public final TableField<SalesordersRecord, String> REMARKS = createField(DSL.name("remarks"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.salesorders.updated_at</code>.
     */
    public final TableField<SalesordersRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Salesorders(Name alias, Table<SalesordersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Salesorders(Name alias, Table<SalesordersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.salesorders</code> table reference
     */
    public Salesorders(String alias) {
        this(DSL.name(alias), SALESORDERS);
    }

    /**
     * Create an aliased <code>public.salesorders</code> table reference
     */
    public Salesorders(Name alias) {
        this(alias, SALESORDERS);
    }

    /**
     * Create a <code>public.salesorders</code> table reference
     */
    public Salesorders() {
        this(DSL.name("salesorders"), null);
    }

    public <O extends Record> Salesorders(Table<O> path, ForeignKey<O, SalesordersRecord> childPath, InverseForeignKey<O, SalesordersRecord> parentPath) {
        super(path, childPath, parentPath, SALESORDERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SalesordersPath extends Salesorders implements Path<SalesordersRecord> {
        public <O extends Record> SalesordersPath(Table<O> path, ForeignKey<O, SalesordersRecord> childPath, InverseForeignKey<O, SalesordersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SalesordersPath(Name alias, Table<SalesordersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SalesordersPath as(String alias) {
            return new SalesordersPath(DSL.name(alias), this);
        }

        @Override
        public SalesordersPath as(Name alias) {
            return new SalesordersPath(alias, this);
        }

        @Override
        public SalesordersPath as(Table<?> alias) {
            return new SalesordersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SALESORDERS_ORDER_DATE, Indexes.IDX_SALESORDERS_PATIENTID, Indexes.IDX_SALESORDERS_SHIFTID, Indexes.IDX_SALESORDERS_STATUS_VAL);
    }

    @Override
    public Identity<SalesordersRecord, Integer> getIdentity() {
        return (Identity<SalesordersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SalesordersRecord> getPrimaryKey() {
        return Keys.SALESORDERS_PKEY;
    }

    @Override
    public List<UniqueKey<SalesordersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SALESORDERS_DELIVERY_APPOINTMENT_ID_KEY);
    }

    @Override
    public List<ForeignKey<SalesordersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SALESORDERS__SALESORDERS_PATIENT_ID_FKEY, Keys.SALESORDERS__SALESORDERS_CREATED_BY_USER_ID_FKEY, Keys.SALESORDERS__SALESORDERS_SHIFT_ID_FKEY, Keys.SALESORDERS__FK_DELIVERY_APPOINTMENT);
    }

    private transient PatientsPath _patients;

    /**
     * Get the implicit join path to the <code>public.patients</code> table.
     */
    public PatientsPath patients() {
        if (_patients == null)
            _patients = new PatientsPath(this, Keys.SALESORDERS__SALESORDERS_PATIENT_ID_FKEY, null);

        return _patients;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.SALESORDERS__SALESORDERS_CREATED_BY_USER_ID_FKEY, null);

        return _users;
    }

    private transient ShiftsPath _shifts;

    /**
     * Get the implicit join path to the <code>public.shifts</code> table.
     */
    public ShiftsPath shifts() {
        if (_shifts == null)
            _shifts = new ShiftsPath(this, Keys.SALESORDERS__SALESORDERS_SHIFT_ID_FKEY, null);

        return _shifts;
    }

    private transient AppointmentsPath _appointments;

    /**
     * Get the implicit join path to the <code>public.appointments</code> table.
     */
    public AppointmentsPath appointments() {
        if (_appointments == null)
            _appointments = new AppointmentsPath(this, Keys.SALESORDERS__FK_DELIVERY_APPOINTMENT, null);

        return _appointments;
    }

    private transient PaymentsPath _payments;

    /**
     * Get the implicit to-many join path to the <code>public.payments</code>
     * table
     */
    public PaymentsPath payments() {
        if (_payments == null)
            _payments = new PaymentsPath(this, null, Keys.PAYMENTS__PAYMENTS_SALES_ORDER_ID_FKEY.getInverseKey());

        return _payments;
    }

    private transient SalesorderitemsPath _salesorderitems;

    /**
     * Get the implicit to-many join path to the
     * <code>public.salesorderitems</code> table
     */
    public SalesorderitemsPath salesorderitems() {
        if (_salesorderitems == null)
            _salesorderitems = new SalesorderitemsPath(this, null, Keys.SALESORDERITEMS__SALESORDERITEMS_SALES_ORDER_ID_FKEY.getInverseKey());

        return _salesorderitems;
    }

    @Override
    public List<Check<SalesordersRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("salesorders_status_check"), "(((status)::text = ANY ((ARRAY['Pending'::character varying, 'Awaiting Lenses'::character varying, 'Ready for Pickup'::character varying, 'Completed'::character varying, 'Cancelled'::character varying, 'Abandoned'::character varying])::text[])))", true)
        );
    }

    @Override
    public Salesorders as(String alias) {
        return new Salesorders(DSL.name(alias), this);
    }

    @Override
    public Salesorders as(Name alias) {
        return new Salesorders(alias, this);
    }

    @Override
    public Salesorders as(Table<?> alias) {
        return new Salesorders(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Salesorders rename(String name) {
        return new Salesorders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Salesorders rename(Name name) {
        return new Salesorders(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Salesorders rename(Table<?> name) {
        return new Salesorders(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Salesorders where(Condition condition) {
        return new Salesorders(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Salesorders where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Salesorders where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Salesorders where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Salesorders where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Salesorders where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Salesorders where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Salesorders where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Salesorders whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Salesorders whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
