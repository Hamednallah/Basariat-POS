/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Keys;
import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.Inventoryitems.InventoryitemsPath;
import com.basariatpos.db.generated.tables.Purchaseorders.PurchaseordersPath;
import com.basariatpos.db.generated.tables.records.PurchaseorderitemsRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Purchaseorderitems extends TableImpl<PurchaseorderitemsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.purchaseorderitems</code>
     */
    public static final Purchaseorderitems PURCHASEORDERITEMS = new Purchaseorderitems();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PurchaseorderitemsRecord> getRecordType() {
        return PurchaseorderitemsRecord.class;
    }

    /**
     * The column <code>public.purchaseorderitems.po_item_id</code>.
     */
    public final TableField<PurchaseorderitemsRecord, Integer> PO_ITEM_ID = createField(DSL.name("po_item_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.purchaseorderitems.purchase_order_id</code>.
     */
    public final TableField<PurchaseorderitemsRecord, Integer> PURCHASE_ORDER_ID = createField(DSL.name("purchase_order_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.purchaseorderitems.inventory_item_id</code>.
     */
    public final TableField<PurchaseorderitemsRecord, Integer> INVENTORY_ITEM_ID = createField(DSL.name("inventory_item_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.purchaseorderitems.quantity_ordered</code>.
     */
    public final TableField<PurchaseorderitemsRecord, Integer> QUANTITY_ORDERED = createField(DSL.name("quantity_ordered"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.purchaseorderitems.quantity_received</code>.
     */
    public final TableField<PurchaseorderitemsRecord, Integer> QUANTITY_RECEIVED = createField(DSL.name("quantity_received"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>public.purchaseorderitems.purchase_price_per_unit</code>.
     */
    public final TableField<PurchaseorderitemsRecord, BigDecimal> PURCHASE_PRICE_PER_UNIT = createField(DSL.name("purchase_price_per_unit"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * The column <code>public.purchaseorderitems.subtotal</code>.
     */
    public final TableField<PurchaseorderitemsRecord, BigDecimal> SUBTOTAL = createField(DSL.name("subtotal"), SQLDataType.NUMERIC(10, 2), this, "");

    private Purchaseorderitems(Name alias, Table<PurchaseorderitemsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Purchaseorderitems(Name alias, Table<PurchaseorderitemsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.purchaseorderitems</code> table reference
     */
    public Purchaseorderitems(String alias) {
        this(DSL.name(alias), PURCHASEORDERITEMS);
    }

    /**
     * Create an aliased <code>public.purchaseorderitems</code> table reference
     */
    public Purchaseorderitems(Name alias) {
        this(alias, PURCHASEORDERITEMS);
    }

    /**
     * Create a <code>public.purchaseorderitems</code> table reference
     */
    public Purchaseorderitems() {
        this(DSL.name("purchaseorderitems"), null);
    }

    public <O extends Record> Purchaseorderitems(Table<O> path, ForeignKey<O, PurchaseorderitemsRecord> childPath, InverseForeignKey<O, PurchaseorderitemsRecord> parentPath) {
        super(path, childPath, parentPath, PURCHASEORDERITEMS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PurchaseorderitemsPath extends Purchaseorderitems implements Path<PurchaseorderitemsRecord> {
        public <O extends Record> PurchaseorderitemsPath(Table<O> path, ForeignKey<O, PurchaseorderitemsRecord> childPath, InverseForeignKey<O, PurchaseorderitemsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PurchaseorderitemsPath(Name alias, Table<PurchaseorderitemsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PurchaseorderitemsPath as(String alias) {
            return new PurchaseorderitemsPath(DSL.name(alias), this);
        }

        @Override
        public PurchaseorderitemsPath as(Name alias) {
            return new PurchaseorderitemsPath(alias, this);
        }

        @Override
        public PurchaseorderitemsPath as(Table<?> alias) {
            return new PurchaseorderitemsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PurchaseorderitemsRecord, Integer> getIdentity() {
        return (Identity<PurchaseorderitemsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PurchaseorderitemsRecord> getPrimaryKey() {
        return Keys.PURCHASEORDERITEMS_PKEY;
    }

    @Override
    public List<ForeignKey<PurchaseorderitemsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PURCHASEORDERITEMS__PURCHASEORDERITEMS_PURCHASE_ORDER_ID_FKEY, Keys.PURCHASEORDERITEMS__PURCHASEORDERITEMS_INVENTORY_ITEM_ID_FKEY);
    }

    private transient PurchaseordersPath _purchaseorders;

    /**
     * Get the implicit join path to the <code>public.purchaseorders</code>
     * table.
     */
    public PurchaseordersPath purchaseorders() {
        if (_purchaseorders == null)
            _purchaseorders = new PurchaseordersPath(this, Keys.PURCHASEORDERITEMS__PURCHASEORDERITEMS_PURCHASE_ORDER_ID_FKEY, null);

        return _purchaseorders;
    }

    private transient InventoryitemsPath _inventoryitems;

    /**
     * Get the implicit join path to the <code>public.inventoryitems</code>
     * table.
     */
    public InventoryitemsPath inventoryitems() {
        if (_inventoryitems == null)
            _inventoryitems = new InventoryitemsPath(this, Keys.PURCHASEORDERITEMS__PURCHASEORDERITEMS_INVENTORY_ITEM_ID_FKEY, null);

        return _inventoryitems;
    }

    @Override
    public List<Check<PurchaseorderitemsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("purchaseorderitems_quantity_ordered_check"), "((quantity_ordered > 0))", true),
            Internal.createCheck(this, DSL.name("purchaseorderitems_quantity_received_check"), "((quantity_received >= 0))", true)
        );
    }

    @Override
    public Purchaseorderitems as(String alias) {
        return new Purchaseorderitems(DSL.name(alias), this);
    }

    @Override
    public Purchaseorderitems as(Name alias) {
        return new Purchaseorderitems(alias, this);
    }

    @Override
    public Purchaseorderitems as(Table<?> alias) {
        return new Purchaseorderitems(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchaseorderitems rename(String name) {
        return new Purchaseorderitems(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchaseorderitems rename(Name name) {
        return new Purchaseorderitems(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchaseorderitems rename(Table<?> name) {
        return new Purchaseorderitems(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Purchaseorderitems where(Condition condition) {
        return new Purchaseorderitems(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Purchaseorderitems where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Purchaseorderitems where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Purchaseorderitems where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Purchaseorderitems where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Purchaseorderitems where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Purchaseorderitems where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Purchaseorderitems where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Purchaseorderitems whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Purchaseorderitems whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
