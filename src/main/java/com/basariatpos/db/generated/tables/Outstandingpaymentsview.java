/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.records.OutstandingpaymentsviewRecord;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Outstandingpaymentsview extends TableImpl<OutstandingpaymentsviewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.outstandingpaymentsview</code>
     */
    public static final Outstandingpaymentsview OUTSTANDINGPAYMENTSVIEW = new Outstandingpaymentsview();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OutstandingpaymentsviewRecord> getRecordType() {
        return OutstandingpaymentsviewRecord.class;
    }

    /**
     * The column <code>public.outstandingpaymentsview.sales_order_id</code>.
     */
    public final TableField<OutstandingpaymentsviewRecord, Integer> SALES_ORDER_ID = createField(DSL.name("sales_order_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.outstandingpaymentsview.order_date</code>.
     */
    public final TableField<OutstandingpaymentsviewRecord, OffsetDateTime> ORDER_DATE = createField(DSL.name("order_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.outstandingpaymentsview.system_patient_id</code>.
     */
    public final TableField<OutstandingpaymentsviewRecord, String> SYSTEM_PATIENT_ID = createField(DSL.name("system_patient_id"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.outstandingpaymentsview.patient_name</code>.
     */
    public final TableField<OutstandingpaymentsviewRecord, String> PATIENT_NAME = createField(DSL.name("patient_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.outstandingpaymentsview.patient_phone</code>.
     */
    public final TableField<OutstandingpaymentsviewRecord, String> PATIENT_PHONE = createField(DSL.name("patient_phone"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.outstandingpaymentsview.total_amount</code>.
     */
    public final TableField<OutstandingpaymentsviewRecord, BigDecimal> TOTAL_AMOUNT = createField(DSL.name("total_amount"), SQLDataType.NUMERIC(12, 2), this, "");

    /**
     * The column <code>public.outstandingpaymentsview.amount_paid</code>.
     */
    public final TableField<OutstandingpaymentsviewRecord, BigDecimal> AMOUNT_PAID = createField(DSL.name("amount_paid"), SQLDataType.NUMERIC(12, 2), this, "");

    /**
     * The column <code>public.outstandingpaymentsview.balance_due</code>.
     */
    public final TableField<OutstandingpaymentsviewRecord, BigDecimal> BALANCE_DUE = createField(DSL.name("balance_due"), SQLDataType.NUMERIC(12, 2), this, "");

    /**
     * The column <code>public.outstandingpaymentsview.status</code>.
     */
    public final TableField<OutstandingpaymentsviewRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>public.outstandingpaymentsview.delivery_appointment</code>.
     */
    public final TableField<OutstandingpaymentsviewRecord, OffsetDateTime> DELIVERY_APPOINTMENT = createField(DSL.name("delivery_appointment"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private Outstandingpaymentsview(Name alias, Table<OutstandingpaymentsviewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Outstandingpaymentsview(Name alias, Table<OutstandingpaymentsviewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "outstandingpaymentsview" as  SELECT so.sales_order_id,
          so.order_date,
          p.system_patient_id,
          p.full_name AS patient_name,
          p.phone_number AS patient_phone,
          so.total_amount,
          so.amount_paid,
          so.balance_due,
          so.status,
          app.appointment_datetime AS delivery_appointment
         FROM ((salesorders so
           LEFT JOIN patients p ON ((so.patient_id = p.patient_id)))
           LEFT JOIN appointments app ON ((so.delivery_appointment_id = app.appointment_id)))
        WHERE ((so.balance_due > (0)::numeric) AND ((so.status)::text <> ALL ((ARRAY['Cancelled'::character varying, 'Abandoned'::character varying])::text[])));
        """), where);
    }

    /**
     * Create an aliased <code>public.outstandingpaymentsview</code> table
     * reference
     */
    public Outstandingpaymentsview(String alias) {
        this(DSL.name(alias), OUTSTANDINGPAYMENTSVIEW);
    }

    /**
     * Create an aliased <code>public.outstandingpaymentsview</code> table
     * reference
     */
    public Outstandingpaymentsview(Name alias) {
        this(alias, OUTSTANDINGPAYMENTSVIEW);
    }

    /**
     * Create a <code>public.outstandingpaymentsview</code> table reference
     */
    public Outstandingpaymentsview() {
        this(DSL.name("outstandingpaymentsview"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Outstandingpaymentsview as(String alias) {
        return new Outstandingpaymentsview(DSL.name(alias), this);
    }

    @Override
    public Outstandingpaymentsview as(Name alias) {
        return new Outstandingpaymentsview(alias, this);
    }

    @Override
    public Outstandingpaymentsview as(Table<?> alias) {
        return new Outstandingpaymentsview(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Outstandingpaymentsview rename(String name) {
        return new Outstandingpaymentsview(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Outstandingpaymentsview rename(Name name) {
        return new Outstandingpaymentsview(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Outstandingpaymentsview rename(Table<?> name) {
        return new Outstandingpaymentsview(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Outstandingpaymentsview where(Condition condition) {
        return new Outstandingpaymentsview(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Outstandingpaymentsview where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Outstandingpaymentsview where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Outstandingpaymentsview where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Outstandingpaymentsview where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Outstandingpaymentsview where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Outstandingpaymentsview where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Outstandingpaymentsview where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Outstandingpaymentsview whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Outstandingpaymentsview whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
