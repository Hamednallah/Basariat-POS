/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables.records;


import com.basariatpos.db.generated.tables.Inventoryitems;

import java.math.BigDecimal;
import java.time.OffsetDateTime;

import org.jooq.JSONB;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class InventoryitemsRecord extends UpdatableRecordImpl<InventoryitemsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.inventoryitems.inventory_item_id</code>.
     */
    public void setInventoryItemId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.inventoryitems.inventory_item_id</code>.
     */
    public Integer getInventoryItemId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.inventoryitems.product_id</code>.
     */
    public void setProductId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.inventoryitems.product_id</code>.
     */
    public Integer getProductId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.inventoryitems.brand_name</code>.
     */
    public void setBrandName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.inventoryitems.brand_name</code>.
     */
    public String getBrandName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.inventoryitems.item_specific_name_en</code>.
     */
    public void setItemSpecificNameEn(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.inventoryitems.item_specific_name_en</code>.
     */
    public String getItemSpecificNameEn() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.inventoryitems.item_specific_name_ar</code>.
     */
    public void setItemSpecificNameAr(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.inventoryitems.item_specific_name_ar</code>.
     */
    public String getItemSpecificNameAr() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.inventoryitems.attributes</code>.
     */
    public void setAttributes(JSONB value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.inventoryitems.attributes</code>.
     */
    public JSONB getAttributes() {
        return (JSONB) get(5);
    }

    /**
     * Setter for <code>public.inventoryitems.quantity_on_hand</code>.
     */
    public void setQuantityOnHand(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.inventoryitems.quantity_on_hand</code>.
     */
    public Integer getQuantityOnHand() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>public.inventoryitems.selling_price</code>.
     */
    public void setSellingPrice(BigDecimal value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.inventoryitems.selling_price</code>.
     */
    public BigDecimal getSellingPrice() {
        return (BigDecimal) get(7);
    }

    /**
     * Setter for <code>public.inventoryitems.cost_price</code>.
     */
    public void setCostPrice(BigDecimal value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.inventoryitems.cost_price</code>.
     */
    public BigDecimal getCostPrice() {
        return (BigDecimal) get(8);
    }

    /**
     * Setter for <code>public.inventoryitems.min_stock_level</code>.
     */
    public void setMinStockLevel(Integer value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.inventoryitems.min_stock_level</code>.
     */
    public Integer getMinStockLevel() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>public.inventoryitems.unit_of_measure</code>.
     */
    public void setUnitOfMeasure(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>public.inventoryitems.unit_of_measure</code>.
     */
    public String getUnitOfMeasure() {
        return (String) get(10);
    }

    /**
     * Setter for <code>public.inventoryitems.is_active</code>.
     */
    public void setIsActive(Boolean value) {
        set(11, value);
    }

    /**
     * Getter for <code>public.inventoryitems.is_active</code>.
     */
    public Boolean getIsActive() {
        return (Boolean) get(11);
    }

    /**
     * Setter for <code>public.inventoryitems.created_at</code>.
     */
    public void setCreatedAt(OffsetDateTime value) {
        set(12, value);
    }

    /**
     * Getter for <code>public.inventoryitems.created_at</code>.
     */
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(12);
    }

    /**
     * Setter for <code>public.inventoryitems.updated_at</code>.
     */
    public void setUpdatedAt(OffsetDateTime value) {
        set(13, value);
    }

    /**
     * Getter for <code>public.inventoryitems.updated_at</code>.
     */
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached InventoryitemsRecord
     */
    public InventoryitemsRecord() {
        super(Inventoryitems.INVENTORYITEMS);
    }

    /**
     * Create a detached, initialised InventoryitemsRecord
     */
    public InventoryitemsRecord(Integer inventoryItemId, Integer productId, String brandName, String itemSpecificNameEn, String itemSpecificNameAr, JSONB attributes, Integer quantityOnHand, BigDecimal sellingPrice, BigDecimal costPrice, Integer minStockLevel, String unitOfMeasure, Boolean isActive, OffsetDateTime createdAt, OffsetDateTime updatedAt) {
        super(Inventoryitems.INVENTORYITEMS);

        setInventoryItemId(inventoryItemId);
        setProductId(productId);
        setBrandName(brandName);
        setItemSpecificNameEn(itemSpecificNameEn);
        setItemSpecificNameAr(itemSpecificNameAr);
        setAttributes(attributes);
        setQuantityOnHand(quantityOnHand);
        setSellingPrice(sellingPrice);
        setCostPrice(costPrice);
        setMinStockLevel(minStockLevel);
        setUnitOfMeasure(unitOfMeasure);
        setIsActive(isActive);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised InventoryitemsRecord
     */
    public InventoryitemsRecord(com.basariatpos.db.generated.tables.pojos.Inventoryitems value) {
        super(Inventoryitems.INVENTORYITEMS);

        if (value != null) {
            setInventoryItemId(value.getInventoryItemId());
            setProductId(value.getProductId());
            setBrandName(value.getBrandName());
            setItemSpecificNameEn(value.getItemSpecificNameEn());
            setItemSpecificNameAr(value.getItemSpecificNameAr());
            setAttributes(value.getAttributes());
            setQuantityOnHand(value.getQuantityOnHand());
            setSellingPrice(value.getSellingPrice());
            setCostPrice(value.getCostPrice());
            setMinStockLevel(value.getMinStockLevel());
            setUnitOfMeasure(value.getUnitOfMeasure());
            setIsActive(value.getIsActive());
            setCreatedAt(value.getCreatedAt());
            setUpdatedAt(value.getUpdatedAt());
            resetChangedOnNotNull();
        }
    }
}
