/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Indexes;
import com.basariatpos.db.generated.Keys;
import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.Shifts.ShiftsPath;
import com.basariatpos.db.generated.tables.Users.UsersPath;
import com.basariatpos.db.generated.tables.records.ShiftpauselogRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Shiftpauselog extends TableImpl<ShiftpauselogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.shiftpauselog</code>
     */
    public static final Shiftpauselog SHIFTPAUSELOG = new Shiftpauselog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShiftpauselogRecord> getRecordType() {
        return ShiftpauselogRecord.class;
    }

    /**
     * The column <code>public.shiftpauselog.shift_pause_log_id</code>.
     */
    public final TableField<ShiftpauselogRecord, Integer> SHIFT_PAUSE_LOG_ID = createField(DSL.name("shift_pause_log_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.shiftpauselog.shift_id</code>.
     */
    public final TableField<ShiftpauselogRecord, Integer> SHIFT_ID = createField(DSL.name("shift_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.shiftpauselog.paused_at</code>.
     */
    public final TableField<ShiftpauselogRecord, OffsetDateTime> PAUSED_AT = createField(DSL.name("paused_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.shiftpauselog.resumed_at</code>.
     */
    public final TableField<ShiftpauselogRecord, OffsetDateTime> RESUMED_AT = createField(DSL.name("resumed_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.shiftpauselog.paused_by_user_id</code>.
     */
    public final TableField<ShiftpauselogRecord, Integer> PAUSED_BY_USER_ID = createField(DSL.name("paused_by_user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Shiftpauselog(Name alias, Table<ShiftpauselogRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Shiftpauselog(Name alias, Table<ShiftpauselogRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.shiftpauselog</code> table reference
     */
    public Shiftpauselog(String alias) {
        this(DSL.name(alias), SHIFTPAUSELOG);
    }

    /**
     * Create an aliased <code>public.shiftpauselog</code> table reference
     */
    public Shiftpauselog(Name alias) {
        this(alias, SHIFTPAUSELOG);
    }

    /**
     * Create a <code>public.shiftpauselog</code> table reference
     */
    public Shiftpauselog() {
        this(DSL.name("shiftpauselog"), null);
    }

    public <O extends Record> Shiftpauselog(Table<O> path, ForeignKey<O, ShiftpauselogRecord> childPath, InverseForeignKey<O, ShiftpauselogRecord> parentPath) {
        super(path, childPath, parentPath, SHIFTPAUSELOG);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ShiftpauselogPath extends Shiftpauselog implements Path<ShiftpauselogRecord> {
        public <O extends Record> ShiftpauselogPath(Table<O> path, ForeignKey<O, ShiftpauselogRecord> childPath, InverseForeignKey<O, ShiftpauselogRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ShiftpauselogPath(Name alias, Table<ShiftpauselogRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ShiftpauselogPath as(String alias) {
            return new ShiftpauselogPath(DSL.name(alias), this);
        }

        @Override
        public ShiftpauselogPath as(Name alias) {
            return new ShiftpauselogPath(alias, this);
        }

        @Override
        public ShiftpauselogPath as(Table<?> alias) {
            return new ShiftpauselogPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SHIFTPAUSELOG_SHIFTID);
    }

    @Override
    public Identity<ShiftpauselogRecord, Integer> getIdentity() {
        return (Identity<ShiftpauselogRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ShiftpauselogRecord> getPrimaryKey() {
        return Keys.SHIFTPAUSELOG_PKEY;
    }

    @Override
    public List<ForeignKey<ShiftpauselogRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SHIFTPAUSELOG__SHIFTPAUSELOG_SHIFT_ID_FKEY, Keys.SHIFTPAUSELOG__SHIFTPAUSELOG_PAUSED_BY_USER_ID_FKEY);
    }

    private transient ShiftsPath _shifts;

    /**
     * Get the implicit join path to the <code>public.shifts</code> table.
     */
    public ShiftsPath shifts() {
        if (_shifts == null)
            _shifts = new ShiftsPath(this, Keys.SHIFTPAUSELOG__SHIFTPAUSELOG_SHIFT_ID_FKEY, null);

        return _shifts;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.SHIFTPAUSELOG__SHIFTPAUSELOG_PAUSED_BY_USER_ID_FKEY, null);

        return _users;
    }

    @Override
    public Shiftpauselog as(String alias) {
        return new Shiftpauselog(DSL.name(alias), this);
    }

    @Override
    public Shiftpauselog as(Name alias) {
        return new Shiftpauselog(alias, this);
    }

    @Override
    public Shiftpauselog as(Table<?> alias) {
        return new Shiftpauselog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Shiftpauselog rename(String name) {
        return new Shiftpauselog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Shiftpauselog rename(Name name) {
        return new Shiftpauselog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Shiftpauselog rename(Table<?> name) {
        return new Shiftpauselog(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shiftpauselog where(Condition condition) {
        return new Shiftpauselog(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shiftpauselog where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shiftpauselog where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shiftpauselog where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shiftpauselog where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shiftpauselog where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shiftpauselog where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shiftpauselog where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shiftpauselog whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shiftpauselog whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
