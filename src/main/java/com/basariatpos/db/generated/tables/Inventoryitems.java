/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Indexes;
import com.basariatpos.db.generated.Keys;
import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.Products.ProductsPath;
import com.basariatpos.db.generated.tables.Purchaseorderitems.PurchaseorderitemsPath;
import com.basariatpos.db.generated.tables.Salesorderitems.SalesorderitemsPath;
import com.basariatpos.db.generated.tables.records.InventoryitemsRecord;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Inventoryitems extends TableImpl<InventoryitemsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.inventoryitems</code>
     */
    public static final Inventoryitems INVENTORYITEMS = new Inventoryitems();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InventoryitemsRecord> getRecordType() {
        return InventoryitemsRecord.class;
    }

    /**
     * The column <code>public.inventoryitems.inventory_item_id</code>.
     */
    public final TableField<InventoryitemsRecord, Integer> INVENTORY_ITEM_ID = createField(DSL.name("inventory_item_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.inventoryitems.product_id</code>.
     */
    public final TableField<InventoryitemsRecord, Integer> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.inventoryitems.brand_name</code>.
     */
    public final TableField<InventoryitemsRecord, String> BRAND_NAME = createField(DSL.name("brand_name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.inventoryitems.item_specific_name_en</code>.
     */
    public final TableField<InventoryitemsRecord, String> ITEM_SPECIFIC_NAME_EN = createField(DSL.name("item_specific_name_en"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.inventoryitems.item_specific_name_ar</code>.
     */
    public final TableField<InventoryitemsRecord, String> ITEM_SPECIFIC_NAME_AR = createField(DSL.name("item_specific_name_ar"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.inventoryitems.attributes</code>.
     */
    public final TableField<InventoryitemsRecord, JSONB> ATTRIBUTES = createField(DSL.name("attributes"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.inventoryitems.quantity_on_hand</code>.
     */
    public final TableField<InventoryitemsRecord, Integer> QUANTITY_ON_HAND = createField(DSL.name("quantity_on_hand"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.inventoryitems.selling_price</code>.
     */
    public final TableField<InventoryitemsRecord, BigDecimal> SELLING_PRICE = createField(DSL.name("selling_price"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * The column <code>public.inventoryitems.cost_price</code>.
     */
    public final TableField<InventoryitemsRecord, BigDecimal> COST_PRICE = createField(DSL.name("cost_price"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>public.inventoryitems.min_stock_level</code>.
     */
    public final TableField<InventoryitemsRecord, Integer> MIN_STOCK_LEVEL = createField(DSL.name("min_stock_level"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.inventoryitems.unit_of_measure</code>.
     */
    public final TableField<InventoryitemsRecord, String> UNIT_OF_MEASURE = createField(DSL.name("unit_of_measure"), SQLDataType.VARCHAR(50).defaultValue(DSL.field(DSL.raw("'Unit'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.inventoryitems.is_active</code>.
     */
    public final TableField<InventoryitemsRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.inventoryitems.created_at</code>.
     */
    public final TableField<InventoryitemsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.inventoryitems.updated_at</code>.
     */
    public final TableField<InventoryitemsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Inventoryitems(Name alias, Table<InventoryitemsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Inventoryitems(Name alias, Table<InventoryitemsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.inventoryitems</code> table reference
     */
    public Inventoryitems(String alias) {
        this(DSL.name(alias), INVENTORYITEMS);
    }

    /**
     * Create an aliased <code>public.inventoryitems</code> table reference
     */
    public Inventoryitems(Name alias) {
        this(alias, INVENTORYITEMS);
    }

    /**
     * Create a <code>public.inventoryitems</code> table reference
     */
    public Inventoryitems() {
        this(DSL.name("inventoryitems"), null);
    }

    public <O extends Record> Inventoryitems(Table<O> path, ForeignKey<O, InventoryitemsRecord> childPath, InverseForeignKey<O, InventoryitemsRecord> parentPath) {
        super(path, childPath, parentPath, INVENTORYITEMS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class InventoryitemsPath extends Inventoryitems implements Path<InventoryitemsRecord> {
        public <O extends Record> InventoryitemsPath(Table<O> path, ForeignKey<O, InventoryitemsRecord> childPath, InverseForeignKey<O, InventoryitemsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private InventoryitemsPath(Name alias, Table<InventoryitemsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public InventoryitemsPath as(String alias) {
            return new InventoryitemsPath(DSL.name(alias), this);
        }

        @Override
        public InventoryitemsPath as(Name alias) {
            return new InventoryitemsPath(alias, this);
        }

        @Override
        public InventoryitemsPath as(Table<?> alias) {
            return new InventoryitemsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_INVENTORYITEMS_NAME_AR, Indexes.IDX_INVENTORYITEMS_NAME_EN, Indexes.IDX_INVENTORYITEMS_PRODUCTID);
    }

    @Override
    public Identity<InventoryitemsRecord, Integer> getIdentity() {
        return (Identity<InventoryitemsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<InventoryitemsRecord> getPrimaryKey() {
        return Keys.INVENTORYITEMS_PKEY;
    }

    @Override
    public List<ForeignKey<InventoryitemsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INVENTORYITEMS__INVENTORYITEMS_PRODUCT_ID_FKEY);
    }

    private transient ProductsPath _products;

    /**
     * Get the implicit join path to the <code>public.products</code> table.
     */
    public ProductsPath products() {
        if (_products == null)
            _products = new ProductsPath(this, Keys.INVENTORYITEMS__INVENTORYITEMS_PRODUCT_ID_FKEY, null);

        return _products;
    }

    private transient PurchaseorderitemsPath _purchaseorderitems;

    /**
     * Get the implicit to-many join path to the
     * <code>public.purchaseorderitems</code> table
     */
    public PurchaseorderitemsPath purchaseorderitems() {
        if (_purchaseorderitems == null)
            _purchaseorderitems = new PurchaseorderitemsPath(this, null, Keys.PURCHASEORDERITEMS__PURCHASEORDERITEMS_INVENTORY_ITEM_ID_FKEY.getInverseKey());

        return _purchaseorderitems;
    }

    private transient SalesorderitemsPath _salesorderitems;

    /**
     * Get the implicit to-many join path to the
     * <code>public.salesorderitems</code> table
     */
    public SalesorderitemsPath salesorderitems() {
        if (_salesorderitems == null)
            _salesorderitems = new SalesorderitemsPath(this, null, Keys.SALESORDERITEMS__SALESORDERITEMS_INVENTORY_ITEM_ID_FKEY.getInverseKey());

        return _salesorderitems;
    }

    @Override
    public List<Check<InventoryitemsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("inventoryitems_quantity_on_hand_check"), "((quantity_on_hand >= 0))", true)
        );
    }

    @Override
    public Inventoryitems as(String alias) {
        return new Inventoryitems(DSL.name(alias), this);
    }

    @Override
    public Inventoryitems as(Name alias) {
        return new Inventoryitems(alias, this);
    }

    @Override
    public Inventoryitems as(Table<?> alias) {
        return new Inventoryitems(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Inventoryitems rename(String name) {
        return new Inventoryitems(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Inventoryitems rename(Name name) {
        return new Inventoryitems(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Inventoryitems rename(Table<?> name) {
        return new Inventoryitems(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inventoryitems where(Condition condition) {
        return new Inventoryitems(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inventoryitems where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inventoryitems where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inventoryitems where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Inventoryitems where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Inventoryitems where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Inventoryitems where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Inventoryitems where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inventoryitems whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inventoryitems whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
