/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Keys;
import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.Users.UsersPath;
import com.basariatpos.db.generated.tables.records.UserpermissionsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Userpermissions extends TableImpl<UserpermissionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.userpermissions</code>
     */
    public static final Userpermissions USERPERMISSIONS = new Userpermissions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserpermissionsRecord> getRecordType() {
        return UserpermissionsRecord.class;
    }

    /**
     * The column <code>public.userpermissions.permission_id</code>.
     */
    public final TableField<UserpermissionsRecord, Integer> PERMISSION_ID = createField(DSL.name("permission_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.userpermissions.user_id</code>.
     */
    public final TableField<UserpermissionsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.userpermissions.permission_name</code>.
     */
    public final TableField<UserpermissionsRecord, String> PERMISSION_NAME = createField(DSL.name("permission_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.userpermissions.is_granted</code>.
     */
    public final TableField<UserpermissionsRecord, Boolean> IS_GRANTED = createField(DSL.name("is_granted"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    private Userpermissions(Name alias, Table<UserpermissionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Userpermissions(Name alias, Table<UserpermissionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.userpermissions</code> table reference
     */
    public Userpermissions(String alias) {
        this(DSL.name(alias), USERPERMISSIONS);
    }

    /**
     * Create an aliased <code>public.userpermissions</code> table reference
     */
    public Userpermissions(Name alias) {
        this(alias, USERPERMISSIONS);
    }

    /**
     * Create a <code>public.userpermissions</code> table reference
     */
    public Userpermissions() {
        this(DSL.name("userpermissions"), null);
    }

    public <O extends Record> Userpermissions(Table<O> path, ForeignKey<O, UserpermissionsRecord> childPath, InverseForeignKey<O, UserpermissionsRecord> parentPath) {
        super(path, childPath, parentPath, USERPERMISSIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserpermissionsPath extends Userpermissions implements Path<UserpermissionsRecord> {
        public <O extends Record> UserpermissionsPath(Table<O> path, ForeignKey<O, UserpermissionsRecord> childPath, InverseForeignKey<O, UserpermissionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserpermissionsPath(Name alias, Table<UserpermissionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserpermissionsPath as(String alias) {
            return new UserpermissionsPath(DSL.name(alias), this);
        }

        @Override
        public UserpermissionsPath as(Name alias) {
            return new UserpermissionsPath(alias, this);
        }

        @Override
        public UserpermissionsPath as(Table<?> alias) {
            return new UserpermissionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<UserpermissionsRecord, Integer> getIdentity() {
        return (Identity<UserpermissionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserpermissionsRecord> getPrimaryKey() {
        return Keys.USERPERMISSIONS_PKEY;
    }

    @Override
    public List<UniqueKey<UserpermissionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.USERPERMISSIONS_USER_ID_PERMISSION_NAME_KEY);
    }

    @Override
    public List<ForeignKey<UserpermissionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USERPERMISSIONS__USERPERMISSIONS_USER_ID_FKEY);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.USERPERMISSIONS__USERPERMISSIONS_USER_ID_FKEY, null);

        return _users;
    }

    @Override
    public Userpermissions as(String alias) {
        return new Userpermissions(DSL.name(alias), this);
    }

    @Override
    public Userpermissions as(Name alias) {
        return new Userpermissions(alias, this);
    }

    @Override
    public Userpermissions as(Table<?> alias) {
        return new Userpermissions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Userpermissions rename(String name) {
        return new Userpermissions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Userpermissions rename(Name name) {
        return new Userpermissions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Userpermissions rename(Table<?> name) {
        return new Userpermissions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Userpermissions where(Condition condition) {
        return new Userpermissions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Userpermissions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Userpermissions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Userpermissions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Userpermissions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Userpermissions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Userpermissions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Userpermissions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Userpermissions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Userpermissions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
