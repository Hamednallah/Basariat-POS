/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Indexes;
import com.basariatpos.db.generated.Keys;
import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.Patients.PatientsPath;
import com.basariatpos.db.generated.tables.Users.UsersPath;
import com.basariatpos.db.generated.tables.records.OpticaldiagnosticsRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Opticaldiagnostics extends TableImpl<OpticaldiagnosticsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.opticaldiagnostics</code>
     */
    public static final Opticaldiagnostics OPTICALDIAGNOSTICS = new Opticaldiagnostics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OpticaldiagnosticsRecord> getRecordType() {
        return OpticaldiagnosticsRecord.class;
    }

    /**
     * The column <code>public.opticaldiagnostics.diagnostic_id</code>.
     */
    public final TableField<OpticaldiagnosticsRecord, Integer> DIAGNOSTIC_ID = createField(DSL.name("diagnostic_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.opticaldiagnostics.patient_id</code>.
     */
    public final TableField<OpticaldiagnosticsRecord, Integer> PATIENT_ID = createField(DSL.name("patient_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.opticaldiagnostics.diagnostic_date</code>.
     */
    public final TableField<OpticaldiagnosticsRecord, LocalDate> DIAGNOSTIC_DATE = createField(DSL.name("diagnostic_date"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_DATE"), SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>public.opticaldiagnostics.is_contact_lens_rx</code>.
     */
    public final TableField<OpticaldiagnosticsRecord, Boolean> IS_CONTACT_LENS_RX = createField(DSL.name("is_contact_lens_rx"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.opticaldiagnostics.contact_lens_details</code>.
     */
    public final TableField<OpticaldiagnosticsRecord, String> CONTACT_LENS_DETAILS = createField(DSL.name("contact_lens_details"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.opticaldiagnostics.od_sph_dist</code>.
     */
    public final TableField<OpticaldiagnosticsRecord, BigDecimal> OD_SPH_DIST = createField(DSL.name("od_sph_dist"), SQLDataType.NUMERIC(5, 2), this, "");

    /**
     * The column <code>public.opticaldiagnostics.od_cyl_dist</code>.
     */
    public final TableField<OpticaldiagnosticsRecord, BigDecimal> OD_CYL_DIST = createField(DSL.name("od_cyl_dist"), SQLDataType.NUMERIC(5, 2), this, "");

    /**
     * The column <code>public.opticaldiagnostics.od_axis_dist</code>.
     */
    public final TableField<OpticaldiagnosticsRecord, Integer> OD_AXIS_DIST = createField(DSL.name("od_axis_dist"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.opticaldiagnostics.os_sph_dist</code>.
     */
    public final TableField<OpticaldiagnosticsRecord, BigDecimal> OS_SPH_DIST = createField(DSL.name("os_sph_dist"), SQLDataType.NUMERIC(5, 2), this, "");

    /**
     * The column <code>public.opticaldiagnostics.os_cyl_dist</code>.
     */
    public final TableField<OpticaldiagnosticsRecord, BigDecimal> OS_CYL_DIST = createField(DSL.name("os_cyl_dist"), SQLDataType.NUMERIC(5, 2), this, "");

    /**
     * The column <code>public.opticaldiagnostics.os_axis_dist</code>.
     */
    public final TableField<OpticaldiagnosticsRecord, Integer> OS_AXIS_DIST = createField(DSL.name("os_axis_dist"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.opticaldiagnostics.od_add</code>.
     */
    public final TableField<OpticaldiagnosticsRecord, BigDecimal> OD_ADD = createField(DSL.name("od_add"), SQLDataType.NUMERIC(5, 2), this, "");

    /**
     * The column <code>public.opticaldiagnostics.os_add</code>.
     */
    public final TableField<OpticaldiagnosticsRecord, BigDecimal> OS_ADD = createField(DSL.name("os_add"), SQLDataType.NUMERIC(5, 2), this, "");

    /**
     * The column <code>public.opticaldiagnostics.ipd</code>.
     */
    public final TableField<OpticaldiagnosticsRecord, BigDecimal> IPD = createField(DSL.name("ipd"), SQLDataType.NUMERIC(5, 2), this, "");

    /**
     * The column <code>public.opticaldiagnostics.remarks</code>.
     */
    public final TableField<OpticaldiagnosticsRecord, String> REMARKS = createField(DSL.name("remarks"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.opticaldiagnostics.created_by_user_id</code>.
     */
    public final TableField<OpticaldiagnosticsRecord, Integer> CREATED_BY_USER_ID = createField(DSL.name("created_by_user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.opticaldiagnostics.created_at</code>.
     */
    public final TableField<OpticaldiagnosticsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Opticaldiagnostics(Name alias, Table<OpticaldiagnosticsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Opticaldiagnostics(Name alias, Table<OpticaldiagnosticsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.opticaldiagnostics</code> table reference
     */
    public Opticaldiagnostics(String alias) {
        this(DSL.name(alias), OPTICALDIAGNOSTICS);
    }

    /**
     * Create an aliased <code>public.opticaldiagnostics</code> table reference
     */
    public Opticaldiagnostics(Name alias) {
        this(alias, OPTICALDIAGNOSTICS);
    }

    /**
     * Create a <code>public.opticaldiagnostics</code> table reference
     */
    public Opticaldiagnostics() {
        this(DSL.name("opticaldiagnostics"), null);
    }

    public <O extends Record> Opticaldiagnostics(Table<O> path, ForeignKey<O, OpticaldiagnosticsRecord> childPath, InverseForeignKey<O, OpticaldiagnosticsRecord> parentPath) {
        super(path, childPath, parentPath, OPTICALDIAGNOSTICS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OpticaldiagnosticsPath extends Opticaldiagnostics implements Path<OpticaldiagnosticsRecord> {
        public <O extends Record> OpticaldiagnosticsPath(Table<O> path, ForeignKey<O, OpticaldiagnosticsRecord> childPath, InverseForeignKey<O, OpticaldiagnosticsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OpticaldiagnosticsPath(Name alias, Table<OpticaldiagnosticsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OpticaldiagnosticsPath as(String alias) {
            return new OpticaldiagnosticsPath(DSL.name(alias), this);
        }

        @Override
        public OpticaldiagnosticsPath as(Name alias) {
            return new OpticaldiagnosticsPath(alias, this);
        }

        @Override
        public OpticaldiagnosticsPath as(Table<?> alias) {
            return new OpticaldiagnosticsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_OPTICALDIAGNOSTICS_PATIENTID);
    }

    @Override
    public Identity<OpticaldiagnosticsRecord, Integer> getIdentity() {
        return (Identity<OpticaldiagnosticsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OpticaldiagnosticsRecord> getPrimaryKey() {
        return Keys.OPTICALDIAGNOSTICS_PKEY;
    }

    @Override
    public List<ForeignKey<OpticaldiagnosticsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OPTICALDIAGNOSTICS__OPTICALDIAGNOSTICS_PATIENT_ID_FKEY, Keys.OPTICALDIAGNOSTICS__OPTICALDIAGNOSTICS_CREATED_BY_USER_ID_FKEY);
    }

    private transient PatientsPath _patients;

    /**
     * Get the implicit join path to the <code>public.patients</code> table.
     */
    public PatientsPath patients() {
        if (_patients == null)
            _patients = new PatientsPath(this, Keys.OPTICALDIAGNOSTICS__OPTICALDIAGNOSTICS_PATIENT_ID_FKEY, null);

        return _patients;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.OPTICALDIAGNOSTICS__OPTICALDIAGNOSTICS_CREATED_BY_USER_ID_FKEY, null);

        return _users;
    }

    @Override
    public Opticaldiagnostics as(String alias) {
        return new Opticaldiagnostics(DSL.name(alias), this);
    }

    @Override
    public Opticaldiagnostics as(Name alias) {
        return new Opticaldiagnostics(alias, this);
    }

    @Override
    public Opticaldiagnostics as(Table<?> alias) {
        return new Opticaldiagnostics(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Opticaldiagnostics rename(String name) {
        return new Opticaldiagnostics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Opticaldiagnostics rename(Name name) {
        return new Opticaldiagnostics(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Opticaldiagnostics rename(Table<?> name) {
        return new Opticaldiagnostics(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Opticaldiagnostics where(Condition condition) {
        return new Opticaldiagnostics(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Opticaldiagnostics where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Opticaldiagnostics where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Opticaldiagnostics where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Opticaldiagnostics where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Opticaldiagnostics where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Opticaldiagnostics where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Opticaldiagnostics where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Opticaldiagnostics whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Opticaldiagnostics whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
