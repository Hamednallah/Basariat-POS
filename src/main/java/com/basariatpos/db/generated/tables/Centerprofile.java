/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Keys;
import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.records.CenterprofileRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Centerprofile extends TableImpl<CenterprofileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.centerprofile</code>
     */
    public static final Centerprofile CENTERPROFILE = new Centerprofile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CenterprofileRecord> getRecordType() {
        return CenterprofileRecord.class;
    }

    /**
     * The column <code>public.centerprofile.profile_id</code>.
     */
    public final TableField<CenterprofileRecord, Integer> PROFILE_ID = createField(DSL.name("profile_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.centerprofile.center_name</code>.
     */
    public final TableField<CenterprofileRecord, String> CENTER_NAME = createField(DSL.name("center_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.centerprofile.address_line1</code>.
     */
    public final TableField<CenterprofileRecord, String> ADDRESS_LINE1 = createField(DSL.name("address_line1"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.centerprofile.address_line2</code>.
     */
    public final TableField<CenterprofileRecord, String> ADDRESS_LINE2 = createField(DSL.name("address_line2"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.centerprofile.city</code>.
     */
    public final TableField<CenterprofileRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.centerprofile.country</code>.
     */
    public final TableField<CenterprofileRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.centerprofile.postal_code</code>.
     */
    public final TableField<CenterprofileRecord, String> POSTAL_CODE = createField(DSL.name("postal_code"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.centerprofile.phone_primary</code>.
     */
    public final TableField<CenterprofileRecord, String> PHONE_PRIMARY = createField(DSL.name("phone_primary"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>public.centerprofile.phone_secondary</code>.
     */
    public final TableField<CenterprofileRecord, String> PHONE_SECONDARY = createField(DSL.name("phone_secondary"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.centerprofile.email_address</code>.
     */
    public final TableField<CenterprofileRecord, String> EMAIL_ADDRESS = createField(DSL.name("email_address"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.centerprofile.website</code>.
     */
    public final TableField<CenterprofileRecord, String> WEBSITE = createField(DSL.name("website"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.centerprofile.logo_image_path</code>.
     */
    public final TableField<CenterprofileRecord, String> LOGO_IMAGE_PATH = createField(DSL.name("logo_image_path"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>public.centerprofile.tax_identifier</code>.
     */
    public final TableField<CenterprofileRecord, String> TAX_IDENTIFIER = createField(DSL.name("tax_identifier"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.centerprofile.currency_symbol</code>.
     */
    public final TableField<CenterprofileRecord, String> CURRENCY_SYMBOL = createField(DSL.name("currency_symbol"), SQLDataType.VARCHAR(10).defaultValue(DSL.field(DSL.raw("'SDG'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.centerprofile.currency_code</code>.
     */
    public final TableField<CenterprofileRecord, String> CURRENCY_CODE = createField(DSL.name("currency_code"), SQLDataType.VARCHAR(5).defaultValue(DSL.field(DSL.raw("'SDG'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.centerprofile.receipt_footer_message</code>.
     */
    public final TableField<CenterprofileRecord, String> RECEIPT_FOOTER_MESSAGE = createField(DSL.name("receipt_footer_message"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.centerprofile.created_at</code>.
     */
    public final TableField<CenterprofileRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.centerprofile.updated_at</code>.
     */
    public final TableField<CenterprofileRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Centerprofile(Name alias, Table<CenterprofileRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Centerprofile(Name alias, Table<CenterprofileRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.centerprofile</code> table reference
     */
    public Centerprofile(String alias) {
        this(DSL.name(alias), CENTERPROFILE);
    }

    /**
     * Create an aliased <code>public.centerprofile</code> table reference
     */
    public Centerprofile(Name alias) {
        this(alias, CENTERPROFILE);
    }

    /**
     * Create a <code>public.centerprofile</code> table reference
     */
    public Centerprofile() {
        this(DSL.name("centerprofile"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<CenterprofileRecord> getPrimaryKey() {
        return Keys.CENTERPROFILE_PKEY;
    }

    @Override
    public List<Check<CenterprofileRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("profile_id_singleton"), "((profile_id = 1))", true)
        );
    }

    @Override
    public Centerprofile as(String alias) {
        return new Centerprofile(DSL.name(alias), this);
    }

    @Override
    public Centerprofile as(Name alias) {
        return new Centerprofile(alias, this);
    }

    @Override
    public Centerprofile as(Table<?> alias) {
        return new Centerprofile(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Centerprofile rename(String name) {
        return new Centerprofile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Centerprofile rename(Name name) {
        return new Centerprofile(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Centerprofile rename(Table<?> name) {
        return new Centerprofile(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Centerprofile where(Condition condition) {
        return new Centerprofile(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Centerprofile where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Centerprofile where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Centerprofile where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Centerprofile where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Centerprofile where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Centerprofile where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Centerprofile where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Centerprofile whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Centerprofile whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
