/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables.daos;


import com.basariatpos.db.generated.tables.Userpermissions;
import com.basariatpos.db.generated.tables.records.UserpermissionsRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserpermissionsDao extends DAOImpl<UserpermissionsRecord, com.basariatpos.db.generated.tables.pojos.Userpermissions, Integer> {

    /**
     * Create a new UserpermissionsDao without any configuration
     */
    public UserpermissionsDao() {
        super(Userpermissions.USERPERMISSIONS, com.basariatpos.db.generated.tables.pojos.Userpermissions.class);
    }

    /**
     * Create a new UserpermissionsDao with an attached configuration
     */
    public UserpermissionsDao(Configuration configuration) {
        super(Userpermissions.USERPERMISSIONS, com.basariatpos.db.generated.tables.pojos.Userpermissions.class, configuration);
    }

    @Override
    public Integer getId(com.basariatpos.db.generated.tables.pojos.Userpermissions object) {
        return object.getPermissionId();
    }

    /**
     * Fetch records that have <code>permission_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.basariatpos.db.generated.tables.pojos.Userpermissions> fetchRangeOfPermissionId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Userpermissions.USERPERMISSIONS.PERMISSION_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>permission_id IN (values)</code>
     */
    public List<com.basariatpos.db.generated.tables.pojos.Userpermissions> fetchByPermissionId(Integer... values) {
        return fetch(Userpermissions.USERPERMISSIONS.PERMISSION_ID, values);
    }

    /**
     * Fetch a unique record that has <code>permission_id = value</code>
     */
    public com.basariatpos.db.generated.tables.pojos.Userpermissions fetchOneByPermissionId(Integer value) {
        return fetchOne(Userpermissions.USERPERMISSIONS.PERMISSION_ID, value);
    }

    /**
     * Fetch a unique record that has <code>permission_id = value</code>
     */
    public Optional<com.basariatpos.db.generated.tables.pojos.Userpermissions> fetchOptionalByPermissionId(Integer value) {
        return fetchOptional(Userpermissions.USERPERMISSIONS.PERMISSION_ID, value);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.basariatpos.db.generated.tables.pojos.Userpermissions> fetchRangeOfUserId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Userpermissions.USERPERMISSIONS.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.basariatpos.db.generated.tables.pojos.Userpermissions> fetchByUserId(Integer... values) {
        return fetch(Userpermissions.USERPERMISSIONS.USER_ID, values);
    }

    /**
     * Fetch records that have <code>permission_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.basariatpos.db.generated.tables.pojos.Userpermissions> fetchRangeOfPermissionName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Userpermissions.USERPERMISSIONS.PERMISSION_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>permission_name IN (values)</code>
     */
    public List<com.basariatpos.db.generated.tables.pojos.Userpermissions> fetchByPermissionName(String... values) {
        return fetch(Userpermissions.USERPERMISSIONS.PERMISSION_NAME, values);
    }

    /**
     * Fetch records that have <code>is_granted BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.basariatpos.db.generated.tables.pojos.Userpermissions> fetchRangeOfIsGranted(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Userpermissions.USERPERMISSIONS.IS_GRANTED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_granted IN (values)</code>
     */
    public List<com.basariatpos.db.generated.tables.pojos.Userpermissions> fetchByIsGranted(Boolean... values) {
        return fetch(Userpermissions.USERPERMISSIONS.IS_GRANTED, values);
    }
}
