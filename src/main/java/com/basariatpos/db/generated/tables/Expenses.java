/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Indexes;
import com.basariatpos.db.generated.Keys;
import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.Banknames.BanknamesPath;
import com.basariatpos.db.generated.tables.Expensecategories.ExpensecategoriesPath;
import com.basariatpos.db.generated.tables.Shifts.ShiftsPath;
import com.basariatpos.db.generated.tables.Users.UsersPath;
import com.basariatpos.db.generated.tables.records.ExpensesRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Expenses extends TableImpl<ExpensesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.expenses</code>
     */
    public static final Expenses EXPENSES = new Expenses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExpensesRecord> getRecordType() {
        return ExpensesRecord.class;
    }

    /**
     * The column <code>public.expenses.expense_id</code>.
     */
    public final TableField<ExpensesRecord, Integer> EXPENSE_ID = createField(DSL.name("expense_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.expenses.expense_date</code>.
     */
    public final TableField<ExpensesRecord, LocalDate> EXPENSE_DATE = createField(DSL.name("expense_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.expenses.expense_category_id</code>.
     */
    public final TableField<ExpensesRecord, Integer> EXPENSE_CATEGORY_ID = createField(DSL.name("expense_category_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.expenses.description</code>.
     */
    public final TableField<ExpensesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.expenses.amount</code>.
     */
    public final TableField<ExpensesRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * The column <code>public.expenses.payment_method</code>.
     */
    public final TableField<ExpensesRecord, String> PAYMENT_METHOD = createField(DSL.name("payment_method"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.expenses.bank_name_id</code>.
     */
    public final TableField<ExpensesRecord, Integer> BANK_NAME_ID = createField(DSL.name("bank_name_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.expenses.transaction_id_ref</code>.
     */
    public final TableField<ExpensesRecord, String> TRANSACTION_ID_REF = createField(DSL.name("transaction_id_ref"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.expenses.created_by_user_id</code>.
     */
    public final TableField<ExpensesRecord, Integer> CREATED_BY_USER_ID = createField(DSL.name("created_by_user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.expenses.shift_id</code>.
     */
    public final TableField<ExpensesRecord, Integer> SHIFT_ID = createField(DSL.name("shift_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.expenses.created_at</code>.
     */
    public final TableField<ExpensesRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.expenses.updated_at</code>.
     */
    public final TableField<ExpensesRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Expenses(Name alias, Table<ExpensesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Expenses(Name alias, Table<ExpensesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.expenses</code> table reference
     */
    public Expenses(String alias) {
        this(DSL.name(alias), EXPENSES);
    }

    /**
     * Create an aliased <code>public.expenses</code> table reference
     */
    public Expenses(Name alias) {
        this(alias, EXPENSES);
    }

    /**
     * Create a <code>public.expenses</code> table reference
     */
    public Expenses() {
        this(DSL.name("expenses"), null);
    }

    public <O extends Record> Expenses(Table<O> path, ForeignKey<O, ExpensesRecord> childPath, InverseForeignKey<O, ExpensesRecord> parentPath) {
        super(path, childPath, parentPath, EXPENSES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ExpensesPath extends Expenses implements Path<ExpensesRecord> {
        public <O extends Record> ExpensesPath(Table<O> path, ForeignKey<O, ExpensesRecord> childPath, InverseForeignKey<O, ExpensesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ExpensesPath(Name alias, Table<ExpensesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ExpensesPath as(String alias) {
            return new ExpensesPath(DSL.name(alias), this);
        }

        @Override
        public ExpensesPath as(Name alias) {
            return new ExpensesPath(alias, this);
        }

        @Override
        public ExpensesPath as(Table<?> alias) {
            return new ExpensesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_EXPENSES_CATEGORYID, Indexes.IDX_EXPENSES_DATE, Indexes.IDX_EXPENSES_SHIFTID);
    }

    @Override
    public Identity<ExpensesRecord, Integer> getIdentity() {
        return (Identity<ExpensesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExpensesRecord> getPrimaryKey() {
        return Keys.EXPENSES_PKEY;
    }

    @Override
    public List<ForeignKey<ExpensesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EXPENSES__EXPENSES_EXPENSE_CATEGORY_ID_FKEY, Keys.EXPENSES__EXPENSES_BANK_NAME_ID_FKEY, Keys.EXPENSES__EXPENSES_CREATED_BY_USER_ID_FKEY, Keys.EXPENSES__EXPENSES_SHIFT_ID_FKEY);
    }

    private transient ExpensecategoriesPath _expensecategories;

    /**
     * Get the implicit join path to the <code>public.expensecategories</code>
     * table.
     */
    public ExpensecategoriesPath expensecategories() {
        if (_expensecategories == null)
            _expensecategories = new ExpensecategoriesPath(this, Keys.EXPENSES__EXPENSES_EXPENSE_CATEGORY_ID_FKEY, null);

        return _expensecategories;
    }

    private transient BanknamesPath _banknames;

    /**
     * Get the implicit join path to the <code>public.banknames</code> table.
     */
    public BanknamesPath banknames() {
        if (_banknames == null)
            _banknames = new BanknamesPath(this, Keys.EXPENSES__EXPENSES_BANK_NAME_ID_FKEY, null);

        return _banknames;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.EXPENSES__EXPENSES_CREATED_BY_USER_ID_FKEY, null);

        return _users;
    }

    private transient ShiftsPath _shifts;

    /**
     * Get the implicit join path to the <code>public.shifts</code> table.
     */
    public ShiftsPath shifts() {
        if (_shifts == null)
            _shifts = new ShiftsPath(this, Keys.EXPENSES__EXPENSES_SHIFT_ID_FKEY, null);

        return _shifts;
    }

    @Override
    public List<Check<ExpensesRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("chk_bank_details_expense"), "((((payment_method)::text = 'Cash'::text) OR (((payment_method)::text = 'Bank Transaction'::text) AND (bank_name_id IS NOT NULL) AND (transaction_id_ref IS NOT NULL))))", true),
            Internal.createCheck(this, DSL.name("expenses_amount_check"), "((amount > (0)::numeric))", true),
            Internal.createCheck(this, DSL.name("expenses_payment_method_check"), "(((payment_method)::text = ANY ((ARRAY['Cash'::character varying, 'Bank Transaction'::character varying])::text[])))", true)
        );
    }

    @Override
    public Expenses as(String alias) {
        return new Expenses(DSL.name(alias), this);
    }

    @Override
    public Expenses as(Name alias) {
        return new Expenses(alias, this);
    }

    @Override
    public Expenses as(Table<?> alias) {
        return new Expenses(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Expenses rename(String name) {
        return new Expenses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Expenses rename(Name name) {
        return new Expenses(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Expenses rename(Table<?> name) {
        return new Expenses(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Expenses where(Condition condition) {
        return new Expenses(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Expenses where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Expenses where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Expenses where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Expenses where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Expenses where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Expenses where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Expenses where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Expenses whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Expenses whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
