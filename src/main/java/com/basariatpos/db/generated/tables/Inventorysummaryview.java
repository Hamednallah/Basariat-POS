/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.records.InventorysummaryviewRecord;

import java.math.BigDecimal;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Inventorysummaryview extends TableImpl<InventorysummaryviewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.inventorysummaryview</code>
     */
    public static final Inventorysummaryview INVENTORYSUMMARYVIEW = new Inventorysummaryview();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InventorysummaryviewRecord> getRecordType() {
        return InventorysummaryviewRecord.class;
    }

    /**
     * The column <code>public.inventorysummaryview.inventory_item_id</code>.
     */
    public final TableField<InventorysummaryviewRecord, Integer> INVENTORY_ITEM_ID = createField(DSL.name("inventory_item_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.inventorysummaryview.product_code</code>.
     */
    public final TableField<InventorysummaryviewRecord, String> PRODUCT_CODE = createField(DSL.name("product_code"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.inventorysummaryview.product_name_en</code>.
     */
    public final TableField<InventorysummaryviewRecord, String> PRODUCT_NAME_EN = createField(DSL.name("product_name_en"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.inventorysummaryview.product_name_ar</code>.
     */
    public final TableField<InventorysummaryviewRecord, String> PRODUCT_NAME_AR = createField(DSL.name("product_name_ar"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.inventorysummaryview.category_name_en</code>.
     */
    public final TableField<InventorysummaryviewRecord, String> CATEGORY_NAME_EN = createField(DSL.name("category_name_en"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.inventorysummaryview.category_name_ar</code>.
     */
    public final TableField<InventorysummaryviewRecord, String> CATEGORY_NAME_AR = createField(DSL.name("category_name_ar"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.inventorysummaryview.brand_name</code>.
     */
    public final TableField<InventorysummaryviewRecord, String> BRAND_NAME = createField(DSL.name("brand_name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column
     * <code>public.inventorysummaryview.item_specific_name_en</code>.
     */
    public final TableField<InventorysummaryviewRecord, String> ITEM_SPECIFIC_NAME_EN = createField(DSL.name("item_specific_name_en"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>public.inventorysummaryview.item_specific_name_ar</code>.
     */
    public final TableField<InventorysummaryviewRecord, String> ITEM_SPECIFIC_NAME_AR = createField(DSL.name("item_specific_name_ar"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.inventorysummaryview.attributes</code>.
     */
    public final TableField<InventorysummaryviewRecord, JSONB> ATTRIBUTES = createField(DSL.name("attributes"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.inventorysummaryview.quantity_on_hand</code>.
     */
    public final TableField<InventorysummaryviewRecord, Integer> QUANTITY_ON_HAND = createField(DSL.name("quantity_on_hand"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.inventorysummaryview.selling_price</code>.
     */
    public final TableField<InventorysummaryviewRecord, BigDecimal> SELLING_PRICE = createField(DSL.name("selling_price"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>public.inventorysummaryview.cost_price</code>.
     */
    public final TableField<InventorysummaryviewRecord, BigDecimal> COST_PRICE = createField(DSL.name("cost_price"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>public.inventorysummaryview.total_cost_value</code>.
     */
    public final TableField<InventorysummaryviewRecord, BigDecimal> TOTAL_COST_VALUE = createField(DSL.name("total_cost_value"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.inventorysummaryview.total_selling_value</code>.
     */
    public final TableField<InventorysummaryviewRecord, BigDecimal> TOTAL_SELLING_VALUE = createField(DSL.name("total_selling_value"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.inventorysummaryview.min_stock_level</code>.
     */
    public final TableField<InventorysummaryviewRecord, Integer> MIN_STOCK_LEVEL = createField(DSL.name("min_stock_level"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.inventorysummaryview.unit_of_measure</code>.
     */
    public final TableField<InventorysummaryviewRecord, String> UNIT_OF_MEASURE = createField(DSL.name("unit_of_measure"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.inventorysummaryview.is_active</code>.
     */
    public final TableField<InventorysummaryviewRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.BOOLEAN, this, "");

    private Inventorysummaryview(Name alias, Table<InventorysummaryviewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Inventorysummaryview(Name alias, Table<InventorysummaryviewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "inventorysummaryview" as  SELECT i.inventory_item_id,
         p.product_code,
         p.product_name_en,
         p.product_name_ar,
         pc.category_name_en,
         pc.category_name_ar,
         i.brand_name,
         i.item_specific_name_en,
         i.item_specific_name_ar,
         i.attributes,
         i.quantity_on_hand,
         i.selling_price,
         i.cost_price,
         ((i.quantity_on_hand)::numeric * COALESCE(i.cost_price, (0)::numeric)) AS total_cost_value,
         ((i.quantity_on_hand)::numeric * i.selling_price) AS total_selling_value,
         i.min_stock_level,
         i.unit_of_measure,
         i.is_active
        FROM ((inventoryitems i
          JOIN products p ON ((i.product_id = p.product_id)))
          JOIN productcategories pc ON ((p.category_id = pc.category_id)));
        """), where);
    }

    /**
     * Create an aliased <code>public.inventorysummaryview</code> table
     * reference
     */
    public Inventorysummaryview(String alias) {
        this(DSL.name(alias), INVENTORYSUMMARYVIEW);
    }

    /**
     * Create an aliased <code>public.inventorysummaryview</code> table
     * reference
     */
    public Inventorysummaryview(Name alias) {
        this(alias, INVENTORYSUMMARYVIEW);
    }

    /**
     * Create a <code>public.inventorysummaryview</code> table reference
     */
    public Inventorysummaryview() {
        this(DSL.name("inventorysummaryview"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Inventorysummaryview as(String alias) {
        return new Inventorysummaryview(DSL.name(alias), this);
    }

    @Override
    public Inventorysummaryview as(Name alias) {
        return new Inventorysummaryview(alias, this);
    }

    @Override
    public Inventorysummaryview as(Table<?> alias) {
        return new Inventorysummaryview(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Inventorysummaryview rename(String name) {
        return new Inventorysummaryview(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Inventorysummaryview rename(Name name) {
        return new Inventorysummaryview(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Inventorysummaryview rename(Table<?> name) {
        return new Inventorysummaryview(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inventorysummaryview where(Condition condition) {
        return new Inventorysummaryview(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inventorysummaryview where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inventorysummaryview where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inventorysummaryview where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Inventorysummaryview where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Inventorysummaryview where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Inventorysummaryview where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Inventorysummaryview where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inventorysummaryview whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Inventorysummaryview whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
