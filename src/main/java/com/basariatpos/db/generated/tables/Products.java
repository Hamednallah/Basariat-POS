/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Indexes;
import com.basariatpos.db.generated.Keys;
import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.Inventoryitems.InventoryitemsPath;
import com.basariatpos.db.generated.tables.Productcategories.ProductcategoriesPath;
import com.basariatpos.db.generated.tables.Salesorderitems.SalesorderitemsPath;
import com.basariatpos.db.generated.tables.records.ProductsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Products extends TableImpl<ProductsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.products</code>
     */
    public static final Products PRODUCTS = new Products();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductsRecord> getRecordType() {
        return ProductsRecord.class;
    }

    /**
     * The column <code>public.products.product_id</code>.
     */
    public final TableField<ProductsRecord, Integer> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.products.product_code</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCT_CODE = createField(DSL.name("product_code"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.products.product_name_en</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCT_NAME_EN = createField(DSL.name("product_name_en"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.products.product_name_ar</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCT_NAME_AR = createField(DSL.name("product_name_ar"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.products.category_id</code>.
     */
    public final TableField<ProductsRecord, Integer> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.products.description_en</code>.
     */
    public final TableField<ProductsRecord, String> DESCRIPTION_EN = createField(DSL.name("description_en"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.products.description_ar</code>.
     */
    public final TableField<ProductsRecord, String> DESCRIPTION_AR = createField(DSL.name("description_ar"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.products.is_service</code>.
     */
    public final TableField<ProductsRecord, Boolean> IS_SERVICE = createField(DSL.name("is_service"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.products.is_stock_item</code>.
     */
    public final TableField<ProductsRecord, Boolean> IS_STOCK_ITEM = createField(DSL.name("is_stock_item"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.products.created_at</code>.
     */
    public final TableField<ProductsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.products.updated_at</code>.
     */
    public final TableField<ProductsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Products(Name alias, Table<ProductsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Products(Name alias, Table<ProductsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.products</code> table reference
     */
    public Products(String alias) {
        this(DSL.name(alias), PRODUCTS);
    }

    /**
     * Create an aliased <code>public.products</code> table reference
     */
    public Products(Name alias) {
        this(alias, PRODUCTS);
    }

    /**
     * Create a <code>public.products</code> table reference
     */
    public Products() {
        this(DSL.name("products"), null);
    }

    public <O extends Record> Products(Table<O> path, ForeignKey<O, ProductsRecord> childPath, InverseForeignKey<O, ProductsRecord> parentPath) {
        super(path, childPath, parentPath, PRODUCTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProductsPath extends Products implements Path<ProductsRecord> {
        public <O extends Record> ProductsPath(Table<O> path, ForeignKey<O, ProductsRecord> childPath, InverseForeignKey<O, ProductsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProductsPath(Name alias, Table<ProductsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProductsPath as(String alias) {
            return new ProductsPath(DSL.name(alias), this);
        }

        @Override
        public ProductsPath as(Name alias) {
            return new ProductsPath(alias, this);
        }

        @Override
        public ProductsPath as(Table<?> alias) {
            return new ProductsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_PRODUCTS_NAME_AR, Indexes.IDX_PRODUCTS_NAME_EN);
    }

    @Override
    public Identity<ProductsRecord, Integer> getIdentity() {
        return (Identity<ProductsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProductsRecord> getPrimaryKey() {
        return Keys.PRODUCTS_PKEY;
    }

    @Override
    public List<UniqueKey<ProductsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PRODUCTS_PRODUCT_CODE_KEY);
    }

    @Override
    public List<ForeignKey<ProductsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRODUCTS__PRODUCTS_CATEGORY_ID_FKEY);
    }

    private transient ProductcategoriesPath _productcategories;

    /**
     * Get the implicit join path to the <code>public.productcategories</code>
     * table.
     */
    public ProductcategoriesPath productcategories() {
        if (_productcategories == null)
            _productcategories = new ProductcategoriesPath(this, Keys.PRODUCTS__PRODUCTS_CATEGORY_ID_FKEY, null);

        return _productcategories;
    }

    private transient InventoryitemsPath _inventoryitems;

    /**
     * Get the implicit to-many join path to the
     * <code>public.inventoryitems</code> table
     */
    public InventoryitemsPath inventoryitems() {
        if (_inventoryitems == null)
            _inventoryitems = new InventoryitemsPath(this, null, Keys.INVENTORYITEMS__INVENTORYITEMS_PRODUCT_ID_FKEY.getInverseKey());

        return _inventoryitems;
    }

    private transient SalesorderitemsPath _salesorderitems;

    /**
     * Get the implicit to-many join path to the
     * <code>public.salesorderitems</code> table
     */
    public SalesorderitemsPath salesorderitems() {
        if (_salesorderitems == null)
            _salesorderitems = new SalesorderitemsPath(this, null, Keys.SALESORDERITEMS__SALESORDERITEMS_SERVICE_PRODUCT_ID_FKEY.getInverseKey());

        return _salesorderitems;
    }

    @Override
    public Products as(String alias) {
        return new Products(DSL.name(alias), this);
    }

    @Override
    public Products as(Name alias) {
        return new Products(alias, this);
    }

    @Override
    public Products as(Table<?> alias) {
        return new Products(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(String name) {
        return new Products(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(Name name) {
        return new Products(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(Table<?> name) {
        return new Products(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products where(Condition condition) {
        return new Products(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Products where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Products where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Products where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Products where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
