/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Keys;
import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.Expenses.ExpensesPath;
import com.basariatpos.db.generated.tables.Payments.PaymentsPath;
import com.basariatpos.db.generated.tables.records.BanknamesRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Banknames extends TableImpl<BanknamesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.banknames</code>
     */
    public static final Banknames BANKNAMES = new Banknames();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BanknamesRecord> getRecordType() {
        return BanknamesRecord.class;
    }

    /**
     * The column <code>public.banknames.bank_name_id</code>.
     */
    public final TableField<BanknamesRecord, Integer> BANK_NAME_ID = createField(DSL.name("bank_name_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.banknames.bank_name_en</code>.
     */
    public final TableField<BanknamesRecord, String> BANK_NAME_EN = createField(DSL.name("bank_name_en"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.banknames.bank_name_ar</code>.
     */
    public final TableField<BanknamesRecord, String> BANK_NAME_AR = createField(DSL.name("bank_name_ar"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.banknames.is_active</code>.
     */
    public final TableField<BanknamesRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    private Banknames(Name alias, Table<BanknamesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Banknames(Name alias, Table<BanknamesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.banknames</code> table reference
     */
    public Banknames(String alias) {
        this(DSL.name(alias), BANKNAMES);
    }

    /**
     * Create an aliased <code>public.banknames</code> table reference
     */
    public Banknames(Name alias) {
        this(alias, BANKNAMES);
    }

    /**
     * Create a <code>public.banknames</code> table reference
     */
    public Banknames() {
        this(DSL.name("banknames"), null);
    }

    public <O extends Record> Banknames(Table<O> path, ForeignKey<O, BanknamesRecord> childPath, InverseForeignKey<O, BanknamesRecord> parentPath) {
        super(path, childPath, parentPath, BANKNAMES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BanknamesPath extends Banknames implements Path<BanknamesRecord> {
        public <O extends Record> BanknamesPath(Table<O> path, ForeignKey<O, BanknamesRecord> childPath, InverseForeignKey<O, BanknamesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BanknamesPath(Name alias, Table<BanknamesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BanknamesPath as(String alias) {
            return new BanknamesPath(DSL.name(alias), this);
        }

        @Override
        public BanknamesPath as(Name alias) {
            return new BanknamesPath(alias, this);
        }

        @Override
        public BanknamesPath as(Table<?> alias) {
            return new BanknamesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<BanknamesRecord, Integer> getIdentity() {
        return (Identity<BanknamesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BanknamesRecord> getPrimaryKey() {
        return Keys.BANKNAMES_PKEY;
    }

    @Override
    public List<UniqueKey<BanknamesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.BANKNAMES_BANK_NAME_EN_KEY, Keys.BANKNAMES_BANK_NAME_AR_KEY);
    }

    private transient ExpensesPath _expenses;

    /**
     * Get the implicit to-many join path to the <code>public.expenses</code>
     * table
     */
    public ExpensesPath expenses() {
        if (_expenses == null)
            _expenses = new ExpensesPath(this, null, Keys.EXPENSES__EXPENSES_BANK_NAME_ID_FKEY.getInverseKey());

        return _expenses;
    }

    private transient PaymentsPath _payments;

    /**
     * Get the implicit to-many join path to the <code>public.payments</code>
     * table
     */
    public PaymentsPath payments() {
        if (_payments == null)
            _payments = new PaymentsPath(this, null, Keys.PAYMENTS__PAYMENTS_BANK_NAME_ID_FKEY.getInverseKey());

        return _payments;
    }

    @Override
    public Banknames as(String alias) {
        return new Banknames(DSL.name(alias), this);
    }

    @Override
    public Banknames as(Name alias) {
        return new Banknames(alias, this);
    }

    @Override
    public Banknames as(Table<?> alias) {
        return new Banknames(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Banknames rename(String name) {
        return new Banknames(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Banknames rename(Name name) {
        return new Banknames(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Banknames rename(Table<?> name) {
        return new Banknames(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Banknames where(Condition condition) {
        return new Banknames(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Banknames where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Banknames where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Banknames where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Banknames where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Banknames where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Banknames where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Banknames where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Banknames whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Banknames whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
