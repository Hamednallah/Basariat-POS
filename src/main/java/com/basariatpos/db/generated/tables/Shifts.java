/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables;


import com.basariatpos.db.generated.Indexes;
import com.basariatpos.db.generated.Keys;
import com.basariatpos.db.generated.Public;
import com.basariatpos.db.generated.tables.Expenses.ExpensesPath;
import com.basariatpos.db.generated.tables.Payments.PaymentsPath;
import com.basariatpos.db.generated.tables.Salesorders.SalesordersPath;
import com.basariatpos.db.generated.tables.Shiftpauselog.ShiftpauselogPath;
import com.basariatpos.db.generated.tables.Users.UsersPath;
import com.basariatpos.db.generated.tables.records.ShiftsRecord;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Shifts extends TableImpl<ShiftsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.shifts</code>
     */
    public static final Shifts SHIFTS = new Shifts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShiftsRecord> getRecordType() {
        return ShiftsRecord.class;
    }

    /**
     * The column <code>public.shifts.shift_id</code>.
     */
    public final TableField<ShiftsRecord, Integer> SHIFT_ID = createField(DSL.name("shift_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.shifts.started_by_user_id</code>.
     */
    public final TableField<ShiftsRecord, Integer> STARTED_BY_USER_ID = createField(DSL.name("started_by_user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.shifts.start_time</code>.
     */
    public final TableField<ShiftsRecord, OffsetDateTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.shifts.end_time</code>.
     */
    public final TableField<ShiftsRecord, OffsetDateTime> END_TIME = createField(DSL.name("end_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.shifts.status</code>.
     */
    public final TableField<ShiftsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.shifts.opening_float</code>.
     */
    public final TableField<ShiftsRecord, BigDecimal> OPENING_FLOAT = createField(DSL.name("opening_float"), SQLDataType.NUMERIC(12, 2).nullable(false), this, "");

    /**
     * The column <code>public.shifts.closing_cash_counted</code>.
     */
    public final TableField<ShiftsRecord, BigDecimal> CLOSING_CASH_COUNTED = createField(DSL.name("closing_cash_counted"), SQLDataType.NUMERIC(12, 2), this, "");

    /**
     * The column <code>public.shifts.expected_cash_in_drawer</code>.
     */
    public final TableField<ShiftsRecord, BigDecimal> EXPECTED_CASH_IN_DRAWER = createField(DSL.name("expected_cash_in_drawer"), SQLDataType.NUMERIC(12, 2), this, "");

    /**
     * The column <code>public.shifts.cash_variance</code>.
     */
    public final TableField<ShiftsRecord, BigDecimal> CASH_VARIANCE = createField(DSL.name("cash_variance"), SQLDataType.NUMERIC(12, 2), this, "");

    /**
     * The column <code>public.shifts.notes</code>.
     */
    public final TableField<ShiftsRecord, String> NOTES = createField(DSL.name("notes"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.shifts.created_at</code>.
     */
    public final TableField<ShiftsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.shifts.updated_at</code>.
     */
    public final TableField<ShiftsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Shifts(Name alias, Table<ShiftsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Shifts(Name alias, Table<ShiftsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.shifts</code> table reference
     */
    public Shifts(String alias) {
        this(DSL.name(alias), SHIFTS);
    }

    /**
     * Create an aliased <code>public.shifts</code> table reference
     */
    public Shifts(Name alias) {
        this(alias, SHIFTS);
    }

    /**
     * Create a <code>public.shifts</code> table reference
     */
    public Shifts() {
        this(DSL.name("shifts"), null);
    }

    public <O extends Record> Shifts(Table<O> path, ForeignKey<O, ShiftsRecord> childPath, InverseForeignKey<O, ShiftsRecord> parentPath) {
        super(path, childPath, parentPath, SHIFTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ShiftsPath extends Shifts implements Path<ShiftsRecord> {
        public <O extends Record> ShiftsPath(Table<O> path, ForeignKey<O, ShiftsRecord> childPath, InverseForeignKey<O, ShiftsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ShiftsPath(Name alias, Table<ShiftsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ShiftsPath as(String alias) {
            return new ShiftsPath(DSL.name(alias), this);
        }

        @Override
        public ShiftsPath as(Name alias) {
            return new ShiftsPath(alias, this);
        }

        @Override
        public ShiftsPath as(Table<?> alias) {
            return new ShiftsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SHIFTS_START_TIME, Indexes.IDX_SHIFTS_USER_STATUS, Indexes.IDX_UNIQUE_ACTIVE_PAUSED_SHIFT_PER_USER);
    }

    @Override
    public Identity<ShiftsRecord, Integer> getIdentity() {
        return (Identity<ShiftsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ShiftsRecord> getPrimaryKey() {
        return Keys.SHIFTS_PKEY;
    }

    @Override
    public List<ForeignKey<ShiftsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SHIFTS__SHIFTS_STARTED_BY_USER_ID_FKEY);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.SHIFTS__SHIFTS_STARTED_BY_USER_ID_FKEY, null);

        return _users;
    }

    private transient ExpensesPath _expenses;

    /**
     * Get the implicit to-many join path to the <code>public.expenses</code>
     * table
     */
    public ExpensesPath expenses() {
        if (_expenses == null)
            _expenses = new ExpensesPath(this, null, Keys.EXPENSES__EXPENSES_SHIFT_ID_FKEY.getInverseKey());

        return _expenses;
    }

    private transient PaymentsPath _payments;

    /**
     * Get the implicit to-many join path to the <code>public.payments</code>
     * table
     */
    public PaymentsPath payments() {
        if (_payments == null)
            _payments = new PaymentsPath(this, null, Keys.PAYMENTS__PAYMENTS_SHIFT_ID_FKEY.getInverseKey());

        return _payments;
    }

    private transient SalesordersPath _salesorders;

    /**
     * Get the implicit to-many join path to the <code>public.salesorders</code>
     * table
     */
    public SalesordersPath salesorders() {
        if (_salesorders == null)
            _salesorders = new SalesordersPath(this, null, Keys.SALESORDERS__SALESORDERS_SHIFT_ID_FKEY.getInverseKey());

        return _salesorders;
    }

    private transient ShiftpauselogPath _shiftpauselog;

    /**
     * Get the implicit to-many join path to the
     * <code>public.shiftpauselog</code> table
     */
    public ShiftpauselogPath shiftpauselog() {
        if (_shiftpauselog == null)
            _shiftpauselog = new ShiftpauselogPath(this, null, Keys.SHIFTPAUSELOG__SHIFTPAUSELOG_SHIFT_ID_FKEY.getInverseKey());

        return _shiftpauselog;
    }

    @Override
    public List<Check<ShiftsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("shifts_status_check"), "(((status)::text = ANY ((ARRAY['Active'::character varying, 'Paused'::character varying, 'Ended'::character varying, 'Interrupted'::character varying])::text[])))", true)
        );
    }

    @Override
    public Shifts as(String alias) {
        return new Shifts(DSL.name(alias), this);
    }

    @Override
    public Shifts as(Name alias) {
        return new Shifts(alias, this);
    }

    @Override
    public Shifts as(Table<?> alias) {
        return new Shifts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Shifts rename(String name) {
        return new Shifts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Shifts rename(Name name) {
        return new Shifts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Shifts rename(Table<?> name) {
        return new Shifts(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shifts where(Condition condition) {
        return new Shifts(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shifts where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shifts where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shifts where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shifts where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shifts where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shifts where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shifts where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shifts whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shifts whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
