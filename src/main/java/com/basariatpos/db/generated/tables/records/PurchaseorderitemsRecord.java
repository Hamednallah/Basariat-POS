/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated.tables.records;


import com.basariatpos.db.generated.tables.Purchaseorderitems;

import java.math.BigDecimal;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PurchaseorderitemsRecord extends UpdatableRecordImpl<PurchaseorderitemsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.purchaseorderitems.po_item_id</code>.
     */
    public void setPoItemId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.purchaseorderitems.po_item_id</code>.
     */
    public Integer getPoItemId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.purchaseorderitems.purchase_order_id</code>.
     */
    public void setPurchaseOrderId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.purchaseorderitems.purchase_order_id</code>.
     */
    public Integer getPurchaseOrderId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.purchaseorderitems.inventory_item_id</code>.
     */
    public void setInventoryItemId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.purchaseorderitems.inventory_item_id</code>.
     */
    public Integer getInventoryItemId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.purchaseorderitems.quantity_ordered</code>.
     */
    public void setQuantityOrdered(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.purchaseorderitems.quantity_ordered</code>.
     */
    public Integer getQuantityOrdered() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>public.purchaseorderitems.quantity_received</code>.
     */
    public void setQuantityReceived(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.purchaseorderitems.quantity_received</code>.
     */
    public Integer getQuantityReceived() {
        return (Integer) get(4);
    }

    /**
     * Setter for
     * <code>public.purchaseorderitems.purchase_price_per_unit</code>.
     */
    public void setPurchasePricePerUnit(BigDecimal value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>public.purchaseorderitems.purchase_price_per_unit</code>.
     */
    public BigDecimal getPurchasePricePerUnit() {
        return (BigDecimal) get(5);
    }

    /**
     * Setter for <code>public.purchaseorderitems.subtotal</code>.
     */
    public void setSubtotal(BigDecimal value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.purchaseorderitems.subtotal</code>.
     */
    public BigDecimal getSubtotal() {
        return (BigDecimal) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PurchaseorderitemsRecord
     */
    public PurchaseorderitemsRecord() {
        super(Purchaseorderitems.PURCHASEORDERITEMS);
    }

    /**
     * Create a detached, initialised PurchaseorderitemsRecord
     */
    public PurchaseorderitemsRecord(Integer poItemId, Integer purchaseOrderId, Integer inventoryItemId, Integer quantityOrdered, Integer quantityReceived, BigDecimal purchasePricePerUnit, BigDecimal subtotal) {
        super(Purchaseorderitems.PURCHASEORDERITEMS);

        setPoItemId(poItemId);
        setPurchaseOrderId(purchaseOrderId);
        setInventoryItemId(inventoryItemId);
        setQuantityOrdered(quantityOrdered);
        setQuantityReceived(quantityReceived);
        setPurchasePricePerUnit(purchasePricePerUnit);
        setSubtotal(subtotal);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised PurchaseorderitemsRecord
     */
    public PurchaseorderitemsRecord(com.basariatpos.db.generated.tables.pojos.Purchaseorderitems value) {
        super(Purchaseorderitems.PURCHASEORDERITEMS);

        if (value != null) {
            setPoItemId(value.getPoItemId());
            setPurchaseOrderId(value.getPurchaseOrderId());
            setInventoryItemId(value.getInventoryItemId());
            setQuantityOrdered(value.getQuantityOrdered());
            setQuantityReceived(value.getQuantityReceived());
            setPurchasePricePerUnit(value.getPurchasePricePerUnit());
            setSubtotal(value.getSubtotal());
            resetChangedOnNotNull();
        }
    }
}
