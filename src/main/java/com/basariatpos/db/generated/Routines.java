/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated;


import com.basariatpos.db.generated.routines.Endshift;
import com.basariatpos.db.generated.routines.GetCurrentAppShiftId;
import com.basariatpos.db.generated.routines.GetCurrentAppUserId;
import com.basariatpos.db.generated.routines.Pauseshift;
import com.basariatpos.db.generated.routines.Processabandonedorder;
import com.basariatpos.db.generated.routines.Processordercompletionstockupdate;
import com.basariatpos.db.generated.routines.Recalculatesalesordersubtotal;
import com.basariatpos.db.generated.routines.Recordpaymentandupdatesalesorder;
import com.basariatpos.db.generated.routines.Resumeshift;
import com.basariatpos.db.generated.routines.SetAppShift;
import com.basariatpos.db.generated.routines.SetAppUser;
import com.basariatpos.db.generated.routines.Startshift;
import com.basariatpos.db.generated.tables.Generateprofitandlossstatement;
import com.basariatpos.db.generated.tables.records.GenerateprofitandlossstatementRecord;

import java.math.BigDecimal;
import java.time.LocalDate;

import org.jooq.Configuration;
import org.jooq.Field;
import org.jooq.Result;


/**
 * Convenience access to all stored procedures and functions in public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Routines {

    /**
     * Call <code>public.endshift</code>
     */
    public static void endshift(
          Configuration configuration
        , Integer pShiftId
        , Integer pUserId
        , BigDecimal pClosingCashCounted
        , String pNotes
    ) {
        Endshift p = new Endshift();
        p.setPShiftId(pShiftId);
        p.setPUserId(pUserId);
        p.setPClosingCashCounted(pClosingCashCounted);
        p.setPNotes(pNotes);

        p.execute(configuration);
    }

    /**
     * Call <code>public.get_current_app_shift_id</code>
     */
    public static Integer getCurrentAppShiftId(
          Configuration configuration
    ) {
        GetCurrentAppShiftId f = new GetCurrentAppShiftId();

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.get_current_app_shift_id</code> as a field.
     */
    public static Field<Integer> getCurrentAppShiftId() {
        GetCurrentAppShiftId f = new GetCurrentAppShiftId();

        return f.asField();
    }

    /**
     * Call <code>public.get_current_app_user_id</code>
     */
    public static Integer getCurrentAppUserId(
          Configuration configuration
    ) {
        GetCurrentAppUserId f = new GetCurrentAppUserId();

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.get_current_app_user_id</code> as a field.
     */
    public static Field<Integer> getCurrentAppUserId() {
        GetCurrentAppUserId f = new GetCurrentAppUserId();

        return f.asField();
    }

    /**
     * Call <code>public.pauseshift</code>
     */
    public static void pauseshift(
          Configuration configuration
        , Integer pShiftId
        , Integer pUserId
    ) {
        Pauseshift p = new Pauseshift();
        p.setPShiftId(pShiftId);
        p.setPUserId(pUserId);

        p.execute(configuration);
    }

    /**
     * Call <code>public.processabandonedorder</code>
     */
    public static void processabandonedorder(
          Configuration configuration
        , Integer pSalesOrderId
        , Integer pAbandonedByUserId
        , Integer[] pRestockItemIds
    ) {
        Processabandonedorder p = new Processabandonedorder();
        p.setPSalesOrderId(pSalesOrderId);
        p.setPAbandonedByUserId(pAbandonedByUserId);
        p.setPRestockItemIds(pRestockItemIds);

        p.execute(configuration);
    }

    /**
     * Call <code>public.processordercompletionstockupdate</code>
     */
    public static void processordercompletionstockupdate(
          Configuration configuration
        , Integer pSalesOrderId
    ) {
        Processordercompletionstockupdate p = new Processordercompletionstockupdate();
        p.setPSalesOrderId(pSalesOrderId);

        p.execute(configuration);
    }

    /**
     * Call <code>public.recalculatesalesordersubtotal</code>
     */
    public static void recalculatesalesordersubtotal(
          Configuration configuration
        , Integer pSalesOrderId
    ) {
        Recalculatesalesordersubtotal p = new Recalculatesalesordersubtotal();
        p.setPSalesOrderId(pSalesOrderId);

        p.execute(configuration);
    }

    /**
     * Call <code>public.recordpaymentandupdatesalesorder</code>
     */
    public static void recordpaymentandupdatesalesorder(
          Configuration configuration
        , Integer pSalesOrderId
        , BigDecimal pAmount
        , String pPaymentMethod
        , Integer pBankNameId
        , String pTransactionId
        , Integer pReceivedByUserId
        , String pNotes
    ) {
        Recordpaymentandupdatesalesorder p = new Recordpaymentandupdatesalesorder();
        p.setPSalesOrderId(pSalesOrderId);
        p.setPAmount(pAmount);
        p.setPPaymentMethod(pPaymentMethod);
        p.setPBankNameId(pBankNameId);
        p.setPTransactionId(pTransactionId);
        p.setPReceivedByUserId(pReceivedByUserId);
        p.setPNotes(pNotes);

        p.execute(configuration);
    }

    /**
     * Call <code>public.resumeshift</code>
     */
    public static void resumeshift(
          Configuration configuration
        , Integer pShiftId
        , Integer pUserId
    ) {
        Resumeshift p = new Resumeshift();
        p.setPShiftId(pShiftId);
        p.setPUserId(pUserId);

        p.execute(configuration);
    }

    /**
     * Call <code>public.set_app_shift</code>
     */
    public static void setAppShift(
          Configuration configuration
        , Integer pShiftId
    ) {
        SetAppShift p = new SetAppShift();
        p.setPShiftId(pShiftId);

        p.execute(configuration);
    }

    /**
     * Call <code>public.set_app_user</code>
     */
    public static void setAppUser(
          Configuration configuration
        , Integer pUserId
    ) {
        SetAppUser p = new SetAppUser();
        p.setPUserId(pUserId);

        p.execute(configuration);
    }

    /**
     * Call <code>public.startshift</code>
     */
    public static Integer startshift(
          Configuration configuration
        , Integer pUserId
        , BigDecimal pOpeningFloat
    ) {
        Startshift p = new Startshift();
        p.setPUserId(pUserId);
        p.setPOpeningFloat(pOpeningFloat);

        p.execute(configuration);
        return p.getPShiftId();
    }

    /**
     * Call <code>public.generateprofitandlossstatement</code>.
     */
    public static Result<GenerateprofitandlossstatementRecord> generateprofitandlossstatement(
          Configuration configuration
        , LocalDate pStartDate
        , LocalDate pEndDate
    ) {
        return configuration.dsl().selectFrom(com.basariatpos.db.generated.tables.Generateprofitandlossstatement.GENERATEPROFITANDLOSSSTATEMENT.call(
              pStartDate
            , pEndDate
        )).fetch();
    }

    /**
     * Get <code>public.generateprofitandlossstatement</code> as a table.
     */
    public static Generateprofitandlossstatement generateprofitandlossstatement(
          LocalDate pStartDate
        , LocalDate pEndDate
    ) {
        return com.basariatpos.db.generated.tables.Generateprofitandlossstatement.GENERATEPROFITANDLOSSSTATEMENT.call(
            pStartDate,
            pEndDate
        );
    }

    /**
     * Get <code>public.generateprofitandlossstatement</code> as a table.
     */
    public static Generateprofitandlossstatement generateprofitandlossstatement(
          Field<LocalDate> pStartDate
        , Field<LocalDate> pEndDate
    ) {
        return com.basariatpos.db.generated.tables.Generateprofitandlossstatement.GENERATEPROFITANDLOSSSTATEMENT.call(
            pStartDate,
            pEndDate
        );
    }
}
