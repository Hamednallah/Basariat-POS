/*
 * This file is generated by jOOQ.
 */
package com.basariatpos.db.generated;


import com.basariatpos.db.generated.tables.Applicationsettings;
import com.basariatpos.db.generated.tables.Appointments;
import com.basariatpos.db.generated.tables.Auditlog;
import com.basariatpos.db.generated.tables.Banknames;
import com.basariatpos.db.generated.tables.Centerprofile;
import com.basariatpos.db.generated.tables.Expensecategories;
import com.basariatpos.db.generated.tables.Expenses;
import com.basariatpos.db.generated.tables.Inventoryitems;
import com.basariatpos.db.generated.tables.Opticaldiagnostics;
import com.basariatpos.db.generated.tables.Patients;
import com.basariatpos.db.generated.tables.Payments;
import com.basariatpos.db.generated.tables.Productcategories;
import com.basariatpos.db.generated.tables.Products;
import com.basariatpos.db.generated.tables.Purchaseorderitems;
import com.basariatpos.db.generated.tables.Purchaseorders;
import com.basariatpos.db.generated.tables.Salesorderitems;
import com.basariatpos.db.generated.tables.Salesorders;
import com.basariatpos.db.generated.tables.Shiftpauselog;
import com.basariatpos.db.generated.tables.Shifts;
import com.basariatpos.db.generated.tables.Userpermissions;
import com.basariatpos.db.generated.tables.Users;
import com.basariatpos.db.generated.tables.records.ApplicationsettingsRecord;
import com.basariatpos.db.generated.tables.records.AppointmentsRecord;
import com.basariatpos.db.generated.tables.records.AuditlogRecord;
import com.basariatpos.db.generated.tables.records.BanknamesRecord;
import com.basariatpos.db.generated.tables.records.CenterprofileRecord;
import com.basariatpos.db.generated.tables.records.ExpensecategoriesRecord;
import com.basariatpos.db.generated.tables.records.ExpensesRecord;
import com.basariatpos.db.generated.tables.records.InventoryitemsRecord;
import com.basariatpos.db.generated.tables.records.OpticaldiagnosticsRecord;
import com.basariatpos.db.generated.tables.records.PatientsRecord;
import com.basariatpos.db.generated.tables.records.PaymentsRecord;
import com.basariatpos.db.generated.tables.records.ProductcategoriesRecord;
import com.basariatpos.db.generated.tables.records.ProductsRecord;
import com.basariatpos.db.generated.tables.records.PurchaseorderitemsRecord;
import com.basariatpos.db.generated.tables.records.PurchaseordersRecord;
import com.basariatpos.db.generated.tables.records.SalesorderitemsRecord;
import com.basariatpos.db.generated.tables.records.SalesordersRecord;
import com.basariatpos.db.generated.tables.records.ShiftpauselogRecord;
import com.basariatpos.db.generated.tables.records.ShiftsRecord;
import com.basariatpos.db.generated.tables.records.UserpermissionsRecord;
import com.basariatpos.db.generated.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ApplicationsettingsRecord> APPLICATIONSETTINGS_PKEY = Internal.createUniqueKey(Applicationsettings.APPLICATIONSETTINGS, DSL.name("applicationsettings_pkey"), new TableField[] { Applicationsettings.APPLICATIONSETTINGS.SETTING_KEY }, true);
    public static final UniqueKey<AppointmentsRecord> APPOINTMENTS_PKEY = Internal.createUniqueKey(Appointments.APPOINTMENTS, DSL.name("appointments_pkey"), new TableField[] { Appointments.APPOINTMENTS.APPOINTMENT_ID }, true);
    public static final UniqueKey<AuditlogRecord> AUDITLOG_PKEY = Internal.createUniqueKey(Auditlog.AUDITLOG, DSL.name("auditlog_pkey"), new TableField[] { Auditlog.AUDITLOG.AUDIT_LOG_ID }, true);
    public static final UniqueKey<BanknamesRecord> BANKNAMES_BANK_NAME_AR_KEY = Internal.createUniqueKey(Banknames.BANKNAMES, DSL.name("banknames_bank_name_ar_key"), new TableField[] { Banknames.BANKNAMES.BANK_NAME_AR }, true);
    public static final UniqueKey<BanknamesRecord> BANKNAMES_BANK_NAME_EN_KEY = Internal.createUniqueKey(Banknames.BANKNAMES, DSL.name("banknames_bank_name_en_key"), new TableField[] { Banknames.BANKNAMES.BANK_NAME_EN }, true);
    public static final UniqueKey<BanknamesRecord> BANKNAMES_PKEY = Internal.createUniqueKey(Banknames.BANKNAMES, DSL.name("banknames_pkey"), new TableField[] { Banknames.BANKNAMES.BANK_NAME_ID }, true);
    public static final UniqueKey<CenterprofileRecord> CENTERPROFILE_PKEY = Internal.createUniqueKey(Centerprofile.CENTERPROFILE, DSL.name("centerprofile_pkey"), new TableField[] { Centerprofile.CENTERPROFILE.PROFILE_ID }, true);
    public static final UniqueKey<ExpensecategoriesRecord> EXPENSECATEGORIES_CATEGORY_NAME_AR_KEY = Internal.createUniqueKey(Expensecategories.EXPENSECATEGORIES, DSL.name("expensecategories_category_name_ar_key"), new TableField[] { Expensecategories.EXPENSECATEGORIES.CATEGORY_NAME_AR }, true);
    public static final UniqueKey<ExpensecategoriesRecord> EXPENSECATEGORIES_CATEGORY_NAME_EN_KEY = Internal.createUniqueKey(Expensecategories.EXPENSECATEGORIES, DSL.name("expensecategories_category_name_en_key"), new TableField[] { Expensecategories.EXPENSECATEGORIES.CATEGORY_NAME_EN }, true);
    public static final UniqueKey<ExpensecategoriesRecord> EXPENSECATEGORIES_PKEY = Internal.createUniqueKey(Expensecategories.EXPENSECATEGORIES, DSL.name("expensecategories_pkey"), new TableField[] { Expensecategories.EXPENSECATEGORIES.EXPENSE_CATEGORY_ID }, true);
    public static final UniqueKey<ExpensesRecord> EXPENSES_PKEY = Internal.createUniqueKey(Expenses.EXPENSES, DSL.name("expenses_pkey"), new TableField[] { Expenses.EXPENSES.EXPENSE_ID }, true);
    public static final UniqueKey<InventoryitemsRecord> INVENTORYITEMS_PKEY = Internal.createUniqueKey(Inventoryitems.INVENTORYITEMS, DSL.name("inventoryitems_pkey"), new TableField[] { Inventoryitems.INVENTORYITEMS.INVENTORY_ITEM_ID }, true);
    public static final UniqueKey<OpticaldiagnosticsRecord> OPTICALDIAGNOSTICS_PKEY = Internal.createUniqueKey(Opticaldiagnostics.OPTICALDIAGNOSTICS, DSL.name("opticaldiagnostics_pkey"), new TableField[] { Opticaldiagnostics.OPTICALDIAGNOSTICS.DIAGNOSTIC_ID }, true);
    public static final UniqueKey<PatientsRecord> PATIENTS_PKEY = Internal.createUniqueKey(Patients.PATIENTS, DSL.name("patients_pkey"), new TableField[] { Patients.PATIENTS.PATIENT_ID }, true);
    public static final UniqueKey<PatientsRecord> PATIENTS_SYSTEM_PATIENT_ID_KEY = Internal.createUniqueKey(Patients.PATIENTS, DSL.name("patients_system_patient_id_key"), new TableField[] { Patients.PATIENTS.SYSTEM_PATIENT_ID }, true);
    public static final UniqueKey<PaymentsRecord> PAYMENTS_PKEY = Internal.createUniqueKey(Payments.PAYMENTS, DSL.name("payments_pkey"), new TableField[] { Payments.PAYMENTS.PAYMENT_ID }, true);
    public static final UniqueKey<ProductcategoriesRecord> PRODUCTCATEGORIES_CATEGORY_NAME_AR_KEY = Internal.createUniqueKey(Productcategories.PRODUCTCATEGORIES, DSL.name("productcategories_category_name_ar_key"), new TableField[] { Productcategories.PRODUCTCATEGORIES.CATEGORY_NAME_AR }, true);
    public static final UniqueKey<ProductcategoriesRecord> PRODUCTCATEGORIES_CATEGORY_NAME_EN_KEY = Internal.createUniqueKey(Productcategories.PRODUCTCATEGORIES, DSL.name("productcategories_category_name_en_key"), new TableField[] { Productcategories.PRODUCTCATEGORIES.CATEGORY_NAME_EN }, true);
    public static final UniqueKey<ProductcategoriesRecord> PRODUCTCATEGORIES_PKEY = Internal.createUniqueKey(Productcategories.PRODUCTCATEGORIES, DSL.name("productcategories_pkey"), new TableField[] { Productcategories.PRODUCTCATEGORIES.CATEGORY_ID }, true);
    public static final UniqueKey<ProductsRecord> PRODUCTS_PKEY = Internal.createUniqueKey(Products.PRODUCTS, DSL.name("products_pkey"), new TableField[] { Products.PRODUCTS.PRODUCT_ID }, true);
    public static final UniqueKey<ProductsRecord> PRODUCTS_PRODUCT_CODE_KEY = Internal.createUniqueKey(Products.PRODUCTS, DSL.name("products_product_code_key"), new TableField[] { Products.PRODUCTS.PRODUCT_CODE }, true);
    public static final UniqueKey<PurchaseorderitemsRecord> PURCHASEORDERITEMS_PKEY = Internal.createUniqueKey(Purchaseorderitems.PURCHASEORDERITEMS, DSL.name("purchaseorderitems_pkey"), new TableField[] { Purchaseorderitems.PURCHASEORDERITEMS.PO_ITEM_ID }, true);
    public static final UniqueKey<PurchaseordersRecord> PURCHASEORDERS_PKEY = Internal.createUniqueKey(Purchaseorders.PURCHASEORDERS, DSL.name("purchaseorders_pkey"), new TableField[] { Purchaseorders.PURCHASEORDERS.PURCHASE_ORDER_ID }, true);
    public static final UniqueKey<SalesorderitemsRecord> SALESORDERITEMS_PKEY = Internal.createUniqueKey(Salesorderitems.SALESORDERITEMS, DSL.name("salesorderitems_pkey"), new TableField[] { Salesorderitems.SALESORDERITEMS.SO_ITEM_ID }, true);
    public static final UniqueKey<SalesordersRecord> SALESORDERS_DELIVERY_APPOINTMENT_ID_KEY = Internal.createUniqueKey(Salesorders.SALESORDERS, DSL.name("salesorders_delivery_appointment_id_key"), new TableField[] { Salesorders.SALESORDERS.DELIVERY_APPOINTMENT_ID }, true);
    public static final UniqueKey<SalesordersRecord> SALESORDERS_PKEY = Internal.createUniqueKey(Salesorders.SALESORDERS, DSL.name("salesorders_pkey"), new TableField[] { Salesorders.SALESORDERS.SALES_ORDER_ID }, true);
    public static final UniqueKey<ShiftpauselogRecord> SHIFTPAUSELOG_PKEY = Internal.createUniqueKey(Shiftpauselog.SHIFTPAUSELOG, DSL.name("shiftpauselog_pkey"), new TableField[] { Shiftpauselog.SHIFTPAUSELOG.SHIFT_PAUSE_LOG_ID }, true);
    public static final UniqueKey<ShiftsRecord> SHIFTS_PKEY = Internal.createUniqueKey(Shifts.SHIFTS, DSL.name("shifts_pkey"), new TableField[] { Shifts.SHIFTS.SHIFT_ID }, true);
    public static final UniqueKey<UserpermissionsRecord> USERPERMISSIONS_PKEY = Internal.createUniqueKey(Userpermissions.USERPERMISSIONS, DSL.name("userpermissions_pkey"), new TableField[] { Userpermissions.USERPERMISSIONS.PERMISSION_ID }, true);
    public static final UniqueKey<UserpermissionsRecord> USERPERMISSIONS_USER_ID_PERMISSION_NAME_KEY = Internal.createUniqueKey(Userpermissions.USERPERMISSIONS, DSL.name("userpermissions_user_id_permission_name_key"), new TableField[] { Userpermissions.USERPERMISSIONS.USER_ID, Userpermissions.USERPERMISSIONS.PERMISSION_NAME }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.USER_ID }, true);
    public static final UniqueKey<UsersRecord> USERS_USERNAME_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_username_key"), new TableField[] { Users.USERS.USERNAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AppointmentsRecord, UsersRecord> APPOINTMENTS__APPOINTMENTS_CREATED_BY_USER_ID_FKEY = Internal.createForeignKey(Appointments.APPOINTMENTS, DSL.name("appointments_created_by_user_id_fkey"), new TableField[] { Appointments.APPOINTMENTS.CREATED_BY_USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.USER_ID }, true);
    public static final ForeignKey<AppointmentsRecord, SalesordersRecord> APPOINTMENTS__APPOINTMENTS_SALES_ORDER_ID_FKEY = Internal.createForeignKey(Appointments.APPOINTMENTS, DSL.name("appointments_sales_order_id_fkey"), new TableField[] { Appointments.APPOINTMENTS.SALES_ORDER_ID }, Keys.SALESORDERS_PKEY, new TableField[] { Salesorders.SALESORDERS.SALES_ORDER_ID }, true);
    public static final ForeignKey<AuditlogRecord, UsersRecord> AUDITLOG__AUDITLOG_USER_ID_FKEY = Internal.createForeignKey(Auditlog.AUDITLOG, DSL.name("auditlog_user_id_fkey"), new TableField[] { Auditlog.AUDITLOG.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.USER_ID }, true);
    public static final ForeignKey<ExpensesRecord, BanknamesRecord> EXPENSES__EXPENSES_BANK_NAME_ID_FKEY = Internal.createForeignKey(Expenses.EXPENSES, DSL.name("expenses_bank_name_id_fkey"), new TableField[] { Expenses.EXPENSES.BANK_NAME_ID }, Keys.BANKNAMES_PKEY, new TableField[] { Banknames.BANKNAMES.BANK_NAME_ID }, true);
    public static final ForeignKey<ExpensesRecord, UsersRecord> EXPENSES__EXPENSES_CREATED_BY_USER_ID_FKEY = Internal.createForeignKey(Expenses.EXPENSES, DSL.name("expenses_created_by_user_id_fkey"), new TableField[] { Expenses.EXPENSES.CREATED_BY_USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.USER_ID }, true);
    public static final ForeignKey<ExpensesRecord, ExpensecategoriesRecord> EXPENSES__EXPENSES_EXPENSE_CATEGORY_ID_FKEY = Internal.createForeignKey(Expenses.EXPENSES, DSL.name("expenses_expense_category_id_fkey"), new TableField[] { Expenses.EXPENSES.EXPENSE_CATEGORY_ID }, Keys.EXPENSECATEGORIES_PKEY, new TableField[] { Expensecategories.EXPENSECATEGORIES.EXPENSE_CATEGORY_ID }, true);
    public static final ForeignKey<ExpensesRecord, ShiftsRecord> EXPENSES__EXPENSES_SHIFT_ID_FKEY = Internal.createForeignKey(Expenses.EXPENSES, DSL.name("expenses_shift_id_fkey"), new TableField[] { Expenses.EXPENSES.SHIFT_ID }, Keys.SHIFTS_PKEY, new TableField[] { Shifts.SHIFTS.SHIFT_ID }, true);
    public static final ForeignKey<InventoryitemsRecord, ProductsRecord> INVENTORYITEMS__INVENTORYITEMS_PRODUCT_ID_FKEY = Internal.createForeignKey(Inventoryitems.INVENTORYITEMS, DSL.name("inventoryitems_product_id_fkey"), new TableField[] { Inventoryitems.INVENTORYITEMS.PRODUCT_ID }, Keys.PRODUCTS_PKEY, new TableField[] { Products.PRODUCTS.PRODUCT_ID }, true);
    public static final ForeignKey<OpticaldiagnosticsRecord, UsersRecord> OPTICALDIAGNOSTICS__OPTICALDIAGNOSTICS_CREATED_BY_USER_ID_FKEY = Internal.createForeignKey(Opticaldiagnostics.OPTICALDIAGNOSTICS, DSL.name("opticaldiagnostics_created_by_user_id_fkey"), new TableField[] { Opticaldiagnostics.OPTICALDIAGNOSTICS.CREATED_BY_USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.USER_ID }, true);
    public static final ForeignKey<OpticaldiagnosticsRecord, PatientsRecord> OPTICALDIAGNOSTICS__OPTICALDIAGNOSTICS_PATIENT_ID_FKEY = Internal.createForeignKey(Opticaldiagnostics.OPTICALDIAGNOSTICS, DSL.name("opticaldiagnostics_patient_id_fkey"), new TableField[] { Opticaldiagnostics.OPTICALDIAGNOSTICS.PATIENT_ID }, Keys.PATIENTS_PKEY, new TableField[] { Patients.PATIENTS.PATIENT_ID }, true);
    public static final ForeignKey<PatientsRecord, UsersRecord> PATIENTS__PATIENTS_CREATED_BY_USER_ID_FKEY = Internal.createForeignKey(Patients.PATIENTS, DSL.name("patients_created_by_user_id_fkey"), new TableField[] { Patients.PATIENTS.CREATED_BY_USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.USER_ID }, true);
    public static final ForeignKey<PaymentsRecord, BanknamesRecord> PAYMENTS__PAYMENTS_BANK_NAME_ID_FKEY = Internal.createForeignKey(Payments.PAYMENTS, DSL.name("payments_bank_name_id_fkey"), new TableField[] { Payments.PAYMENTS.BANK_NAME_ID }, Keys.BANKNAMES_PKEY, new TableField[] { Banknames.BANKNAMES.BANK_NAME_ID }, true);
    public static final ForeignKey<PaymentsRecord, UsersRecord> PAYMENTS__PAYMENTS_RECEIVED_BY_USER_ID_FKEY = Internal.createForeignKey(Payments.PAYMENTS, DSL.name("payments_received_by_user_id_fkey"), new TableField[] { Payments.PAYMENTS.RECEIVED_BY_USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.USER_ID }, true);
    public static final ForeignKey<PaymentsRecord, SalesordersRecord> PAYMENTS__PAYMENTS_SALES_ORDER_ID_FKEY = Internal.createForeignKey(Payments.PAYMENTS, DSL.name("payments_sales_order_id_fkey"), new TableField[] { Payments.PAYMENTS.SALES_ORDER_ID }, Keys.SALESORDERS_PKEY, new TableField[] { Salesorders.SALESORDERS.SALES_ORDER_ID }, true);
    public static final ForeignKey<PaymentsRecord, ShiftsRecord> PAYMENTS__PAYMENTS_SHIFT_ID_FKEY = Internal.createForeignKey(Payments.PAYMENTS, DSL.name("payments_shift_id_fkey"), new TableField[] { Payments.PAYMENTS.SHIFT_ID }, Keys.SHIFTS_PKEY, new TableField[] { Shifts.SHIFTS.SHIFT_ID }, true);
    public static final ForeignKey<ProductsRecord, ProductcategoriesRecord> PRODUCTS__PRODUCTS_CATEGORY_ID_FKEY = Internal.createForeignKey(Products.PRODUCTS, DSL.name("products_category_id_fkey"), new TableField[] { Products.PRODUCTS.CATEGORY_ID }, Keys.PRODUCTCATEGORIES_PKEY, new TableField[] { Productcategories.PRODUCTCATEGORIES.CATEGORY_ID }, true);
    public static final ForeignKey<PurchaseorderitemsRecord, InventoryitemsRecord> PURCHASEORDERITEMS__PURCHASEORDERITEMS_INVENTORY_ITEM_ID_FKEY = Internal.createForeignKey(Purchaseorderitems.PURCHASEORDERITEMS, DSL.name("purchaseorderitems_inventory_item_id_fkey"), new TableField[] { Purchaseorderitems.PURCHASEORDERITEMS.INVENTORY_ITEM_ID }, Keys.INVENTORYITEMS_PKEY, new TableField[] { Inventoryitems.INVENTORYITEMS.INVENTORY_ITEM_ID }, true);
    public static final ForeignKey<PurchaseorderitemsRecord, PurchaseordersRecord> PURCHASEORDERITEMS__PURCHASEORDERITEMS_PURCHASE_ORDER_ID_FKEY = Internal.createForeignKey(Purchaseorderitems.PURCHASEORDERITEMS, DSL.name("purchaseorderitems_purchase_order_id_fkey"), new TableField[] { Purchaseorderitems.PURCHASEORDERITEMS.PURCHASE_ORDER_ID }, Keys.PURCHASEORDERS_PKEY, new TableField[] { Purchaseorders.PURCHASEORDERS.PURCHASE_ORDER_ID }, true);
    public static final ForeignKey<PurchaseordersRecord, UsersRecord> PURCHASEORDERS__PURCHASEORDERS_CREATED_BY_USER_ID_FKEY = Internal.createForeignKey(Purchaseorders.PURCHASEORDERS, DSL.name("purchaseorders_created_by_user_id_fkey"), new TableField[] { Purchaseorders.PURCHASEORDERS.CREATED_BY_USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.USER_ID }, true);
    public static final ForeignKey<SalesorderitemsRecord, InventoryitemsRecord> SALESORDERITEMS__SALESORDERITEMS_INVENTORY_ITEM_ID_FKEY = Internal.createForeignKey(Salesorderitems.SALESORDERITEMS, DSL.name("salesorderitems_inventory_item_id_fkey"), new TableField[] { Salesorderitems.SALESORDERITEMS.INVENTORY_ITEM_ID }, Keys.INVENTORYITEMS_PKEY, new TableField[] { Inventoryitems.INVENTORYITEMS.INVENTORY_ITEM_ID }, true);
    public static final ForeignKey<SalesorderitemsRecord, SalesordersRecord> SALESORDERITEMS__SALESORDERITEMS_SALES_ORDER_ID_FKEY = Internal.createForeignKey(Salesorderitems.SALESORDERITEMS, DSL.name("salesorderitems_sales_order_id_fkey"), new TableField[] { Salesorderitems.SALESORDERITEMS.SALES_ORDER_ID }, Keys.SALESORDERS_PKEY, new TableField[] { Salesorders.SALESORDERS.SALES_ORDER_ID }, true);
    public static final ForeignKey<SalesorderitemsRecord, ProductsRecord> SALESORDERITEMS__SALESORDERITEMS_SERVICE_PRODUCT_ID_FKEY = Internal.createForeignKey(Salesorderitems.SALESORDERITEMS, DSL.name("salesorderitems_service_product_id_fkey"), new TableField[] { Salesorderitems.SALESORDERITEMS.SERVICE_PRODUCT_ID }, Keys.PRODUCTS_PKEY, new TableField[] { Products.PRODUCTS.PRODUCT_ID }, true);
    public static final ForeignKey<SalesordersRecord, AppointmentsRecord> SALESORDERS__FK_DELIVERY_APPOINTMENT = Internal.createForeignKey(Salesorders.SALESORDERS, DSL.name("fk_delivery_appointment"), new TableField[] { Salesorders.SALESORDERS.DELIVERY_APPOINTMENT_ID }, Keys.APPOINTMENTS_PKEY, new TableField[] { Appointments.APPOINTMENTS.APPOINTMENT_ID }, true);
    public static final ForeignKey<SalesordersRecord, UsersRecord> SALESORDERS__SALESORDERS_CREATED_BY_USER_ID_FKEY = Internal.createForeignKey(Salesorders.SALESORDERS, DSL.name("salesorders_created_by_user_id_fkey"), new TableField[] { Salesorders.SALESORDERS.CREATED_BY_USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.USER_ID }, true);
    public static final ForeignKey<SalesordersRecord, PatientsRecord> SALESORDERS__SALESORDERS_PATIENT_ID_FKEY = Internal.createForeignKey(Salesorders.SALESORDERS, DSL.name("salesorders_patient_id_fkey"), new TableField[] { Salesorders.SALESORDERS.PATIENT_ID }, Keys.PATIENTS_PKEY, new TableField[] { Patients.PATIENTS.PATIENT_ID }, true);
    public static final ForeignKey<SalesordersRecord, ShiftsRecord> SALESORDERS__SALESORDERS_SHIFT_ID_FKEY = Internal.createForeignKey(Salesorders.SALESORDERS, DSL.name("salesorders_shift_id_fkey"), new TableField[] { Salesorders.SALESORDERS.SHIFT_ID }, Keys.SHIFTS_PKEY, new TableField[] { Shifts.SHIFTS.SHIFT_ID }, true);
    public static final ForeignKey<ShiftpauselogRecord, UsersRecord> SHIFTPAUSELOG__SHIFTPAUSELOG_PAUSED_BY_USER_ID_FKEY = Internal.createForeignKey(Shiftpauselog.SHIFTPAUSELOG, DSL.name("shiftpauselog_paused_by_user_id_fkey"), new TableField[] { Shiftpauselog.SHIFTPAUSELOG.PAUSED_BY_USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.USER_ID }, true);
    public static final ForeignKey<ShiftpauselogRecord, ShiftsRecord> SHIFTPAUSELOG__SHIFTPAUSELOG_SHIFT_ID_FKEY = Internal.createForeignKey(Shiftpauselog.SHIFTPAUSELOG, DSL.name("shiftpauselog_shift_id_fkey"), new TableField[] { Shiftpauselog.SHIFTPAUSELOG.SHIFT_ID }, Keys.SHIFTS_PKEY, new TableField[] { Shifts.SHIFTS.SHIFT_ID }, true);
    public static final ForeignKey<ShiftsRecord, UsersRecord> SHIFTS__SHIFTS_STARTED_BY_USER_ID_FKEY = Internal.createForeignKey(Shifts.SHIFTS, DSL.name("shifts_started_by_user_id_fkey"), new TableField[] { Shifts.SHIFTS.STARTED_BY_USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.USER_ID }, true);
    public static final ForeignKey<UserpermissionsRecord, UsersRecord> USERPERMISSIONS__USERPERMISSIONS_USER_ID_FKEY = Internal.createForeignKey(Userpermissions.USERPERMISSIONS, DSL.name("userpermissions_user_id_fkey"), new TableField[] { Userpermissions.USERPERMISSIONS.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.USER_ID }, true);
}
