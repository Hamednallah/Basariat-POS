Basariat POS - Implementation Plan (Final - EN)
9.1. Development Philosophy:
Iterative and Incremental Development: The "Basariat POS" system will be developed in a series of distinct phases or sprints. Each sprint (typically lasting 2-3 weeks, but adaptable based on team velocity and complexity) will aim to deliver a functional and tested subset of the application's features. This iterative approach allows for early and continuous feedback from stakeholders, integration of components as they are developed, and the flexibility to adapt to any evolving requirements or clarifications that may arise during the development lifecycle.
Modularity and Separation of Concerns: The application's architecture will emphasize modularity, with a clear separation between distinct layers: Presentation (JavaFX UI Views and Controllers), Application Logic/Controller Layer, Business Logic/Service Layer, Data Access/Repository Layer, and Domain Model (Entities/DTOs), as outlined in the System Architecture document. This promotes code reusability, enhances testability of individual components, and improves the overall maintainability and scalability of the system.
LLM-Assisted Development with Rigorous Oversight & Methodical Approach: Development will be assisted by an LLM coding agent. The human developer will provide specific, well-defined tasks, necessary context from project documentation, and will meticulously review all LLM-generated code, tests, and analyses. The LLM MUST strictly follow the LLM_GUIDELINES.md document, especially the "CRITICAL RULE #1: MANDATORY SYSTEMATIC APPROACH - ANALYZE BEFORE CODING" and "CRITICAL RULE #2: TEST-DRIVEN DEVELOPMENT - NO UNTESTED FUNCTIONAL CODE" rules. No code should be generated before a clear analysis and implementation outline is presented by the LLM and approved (if necessary) by the human developer.
Test-Driven Development (TDD) / Behavior-Driven Development (BDD) - Enforced: All new functional code (methods in services, repositories, non-trivial UI controller logic) MUST be accompanied by corresponding unit tests (using JUnit 5). Integration tests must be written for interactions between layers. No functional code should be considered complete or committed without passing, comprehensive tests.
Code Quality & Standards: Adherence to established Java coding best practices and conventions (e.g., Google Java Style Guide, effective use of Object-Oriented Programming principles such as SOLID) is mandatory. Code must be well-documented with Javadoc comments for all public APIs (classes, methods) and clear inline comments for complex or non-obvious logic sections. Regular code reviews by the human developer are mandatory for all LLM-generated and human-written code.
Version Control: Diligent and disciplined use of Git for source code management is mandatory throughout the project lifecycle. This includes using meaningful and descriptive commit messages, adopting a clear and consistent branching strategy (e.g., feature branches for new development and bug fixes, a develop branch for integrating completed features, and a main or master branch for stable releases), and performing regular pushes to a central repository (e.g., hosted on GitHub, GitLab, Bitbucket, or a private Git server) to ensure code safety and facilitate collaboration.
User-Centric Design: The end-user experience (UX), particularly for the Cashier roles who will be the most frequent users of the system for daily operations, must be a primary consideration throughout all phases of design and development. The User Interface (UI) should prioritize simplicity, efficiency, and intuitiveness, strictly adhering to the defined UI/UX guidelines and visual theme as specified in ui_ux_optical_final_v3.md.
Completeness within Sprints: Each feature or component implemented within a sprint must be fully completed to the extent defined for that sprint, including all necessary logic, UI elements, error handling, i18n, and testing. Aspects should not be deferred "for the future" unless explicitly planned as such and documented as out of scope for the current sprint.
Build Integrity: At the end of each sprint, and ideally more frequently, the project must compile and build successfully using the specified build tool (Maven or Gradle) without any errors or warnings. All automated tests must pass.
9.2. Phased Development (Suggested Sprints/Modules - Human Developer will break down each high-level task further for the LLM, providing specific context and expecting adherence to LLM_GUIDELINES.md):
Sprint 0: Foundation, Core Setup & UI Shell (2-3 weeks)
Key Objectives: Establish the project structure, database, core services, basic UI shell, and essential configurations. Ensure the LLM understands and adheres to the development guidelines from the outset.
Tasks (Human developer guides LLM through these, ensuring analysis before coding and testing for each):
Project Setup (Human Lead): Configure IDE, select and configure build tool (Maven/Gradle for Java 21 & JavaFX), initialize Git repository.
Database Implementation (Human Lead, LLM can review script): Execute the full final SQL script (db_script_basariat_pos_final_v3) to create all tables, views, utility functions, core stored procedures, and initial triggers in a development PostgreSQL database.
jOOQ Integration (Human Lead, LLM can assist): Configure jOOQ, perform initial code generation, integrate generated classes.
Application Shell (JavaFX - LLM): Develop MainFrame.fxml / MainView.fxml and MainFrameController.java. Implement primary menu structure (File, Edit, View, Patient, Sales, Inventory, Reports, Admin, Help) and basic navigation framework.
Package Structure (Human Defines, LLM Adheres): Establish core Java package structure (com.basariatpos.* sub-packages).
Core Utilities & Config (LLM): Implement DBManager (PostgreSQL connections, jOOQ DSLContext), basic Logger (SLF4J+Logback), AppConfigLoader.
Session Management Core (LLM): Implement UserSessionService (or AppSessionManager) to manage current logged-in User and active Shift. Implement calls to set_app_user() and set_app_shift() DB procedures on login/shift start, and clearing on logout/shift end. Write unit tests.
i18n Framework (LLM): Set up ResourceBundle loading for English and Arabic. Implement LocaleManager and MessageProvider. Implement basic locale switching in the main shell. Localize main shell UI text. Write unit tests.
Initial Center Profile Setup Wizard (LLM): Develop UI (CenterProfileSetupWizard.fxml & controller) and backend (CenterProfileService, CenterProfileRepository) for first-time CenterProfile data entry and saving. Write unit and integration tests.
Login Screen & Authentication (LLM): Develop LoginView.fxml & LoginController. Implement authentication logic (calling UserService - to be developed in Sprint 1, can use a mock/placeholder for now) including secure password handling. Upon success, display main window and update UserSessionService. Write controller tests (mocking service).
"About Basariat POS" Dialog (LLM): Create static AboutDialog.fxml & controller displaying application name, version (placeholder), and developer details. Localize fixed labels.
Help Section Framework (LLM): Implement "Help" menu to open a placeholder User Manual (e.g., simple HTML in WebView or external PDF).
Goal: A runnable JavaFX application. Initial center setup is functional. User can login (basic/mocked auth). Main window with menus appears. Session context for user/shift is established in DB. Basic i18n works for the shell. "About" and placeholder "Help" are accessible. All LLM-generated code is analyzed first and tested.
Sprint 1: User Management, Advanced Configuration & Basic Shift UI (2-3 weeks)
Key Objectives: Implement full user and permissions management. Allow Admin to configure center profile and core lookup lists. Implement UI for starting, pausing, and resuming shifts, and enforce transaction blocking if no shift is active.
Tasks (Human developer guides LLM, ensuring analysis and testing for each component):
User & Permissions Backend (LLM): Implement UserRepository (CRUD for Users, UserPermissions), UserService (password hashing, user creation/update, permission assignment logic). Write comprehensive unit and integration tests.
User Management UI (LLM): Develop UserManagementForm.fxml and controller for Admin (CRUD users, assign permissions). Write controller tests (mocking service).
Center Profile Management UI (LLM): Enhance/create UI for Admin to view/edit CenterProfile details post-setup (via CenterProfileService). Write controller tests.
Core Lists Management UI & Backend (LLM - one by one): Implement CRUD UIs, Services, Repositories for BankNames, ExpenseCategories (ensure "Loss on Abandoned Orders" handled), ProductCategories. Write tests for each module.
Application Settings UI & Backend (LLM): Implement UI for Admin to manage ApplicationSettings (e.g., WhatsApp templates). Write tests.
Shift Management UI (Core Controls - LLM):
Implement "Start Shift" button/menu. Develop StartShiftDialog.fxml & controller (inputs opening_float). Logic in ShiftControllerUI (or dedicated controller) calls StartShift DB procedure via ShiftService.
Develop ShiftStatusIndicatorPanel.fxml (or equivalent UI area) in main UI to display current shift status dynamically (No Active Shift, Active: [User] - Started: [Time], Paused).
Implement "Pause Shift" and "Resume Shift" buttons/menu items, with logic calling respective DB procedures via ShiftService and updating UI status.
Transaction Blocking Logic (UI - LLM): Implement application-level checks in relevant UI controllers to disable/prevent initiation of financial transactions if UserSessionService indicates no 'Active' shift.
Testing: Ensure all new backend logic has unit/integration tests. UI controllers have unit tests (mocking services).
Goal: Full user/config capabilities for Admin. Cashiers can start/pause/resume shifts; UI reflects state. Financial transactions correctly blocked if no active shift. All new code is analyzed first and thoroughly tested.
Sprint 2: Patient Management & Optical Diagnostics (2 weeks)
Key Objectives: Implement full patient record management, including WhatsApp consent, and optical diagnostic history. Implement shift interruption handling.
Tasks (Human developer guides LLM, ensuring analysis and testing):
Patient Management Backend (LLM): Implement PatientRepository and PatientService (CRUD, search logic). Write tests.
Patient Management UI (LLM): Develop PatientForm.fxml, PatientTablePanel.fxml (with search/filter). Include whatsapp_opt_in checkbox and logic in controller to update via PatientService. Write controller tests.
Optical Diagnostics Backend (LLM): Implement OpticalDiagnosticRepository and OpticalDiagnosticService. Write tests.
Optical Diagnostics UI (LLM): Develop DiagnosticForm.fxml and integrate with patient view for recording new diagnostics and viewing history. Write controller tests.
Shift Interruption Handling (LLM): Implement logic (e.g., in UserSessionService or LoginController) to check for user's interrupted shifts on login. Prompt user to "Resume" or "Forcibly End" (latter may need simplified EndShift path or Admin flag). Implement corresponding service calls. Write tests for this logic.
Goal: Full patient record and diagnostic management functional. WhatsApp consent captured. Interrupted shifts are detected and can be handled. All new code is analyzed first and tested.
Sprint 3: Inventory & Purchase Order Management (2-3 weeks)
Key Objectives: Implement comprehensive product catalog, inventory item management (stock, pricing), and purchase order workflow including stock receiving.
Tasks (Human developer guides LLM, ensuring analysis and testing):
Product Master & Category Backend & UI (LLM): Implement ProductCategoryRepository/Service and ProductRepository/Service. Admin UI for managing these. Write tests.
Inventory Item Backend & UI (LLM): Implement InventoryItemRepository and InventoryService. Admin/Cashier UI for InventoryItems (CRUD, attributes, pricing, stock levels). Low Stock alert display/report (using LowStockItemsView). Write tests.
Purchase Order Backend & UI (LLM): Implement PurchaseOrderRepository and PurchaseOrderService. UI for PO creation, item addition. UI and logic for stock receiving (updating quantity_received). Ensure DB triggers for total_amount and inventory updates (quantity_on_hand, cost_price) function correctly and UI reflects changes. Write tests.
Manual Stock Adjustments (LLM): Implement UI and service logic for authorized users to perform manual stock adjustments, capturing reason and ensuring audit logging. Write tests.
Goal: Full product/inventory management. POs created, stock received with auto-updates. Manual stock adjustments audited. All new code analyzed first and tested.
Sprint 4: Sales Order Processing - Basic & Custom (Linked to Shifts) (3 weeks)
Key Objectives: Implement sales order creation for all item types, discount application, and basic WhatsApp "Order Ready" notification, all linked to active shifts.
Tasks (Human developer guides LLM, ensuring analysis and testing):
Sales Order Backend Core (LLM): Implement SalesOrderRepository and SalesOrderService (core creation, item addition, status updates).
Sales Order UI (LLM): Develop SalesOrderForm.fxml and controller. Link to active shift and patient. Implement adding stock items and standard services.
Custom Spectacle Lenses UI & Logic (LLM): Enhance SalesOrderForm for custom lens orders (Rx, attributes, blue-cut rule). Implement pricing logic in SalesOrderService.
Custom Quote Services UI (LLM): Allow manual description/price entry for services in SalesOrderForm.
Discount Application (LLM): Implement UI and permission-based logic for applying discounts. Ensure DB generated columns for totals update.
Order Status Management (UI - LLM): UI for managing statuses ('Pending', 'Awaiting Lenses', 'Ready for Pickup').
WhatsApp "Order Ready" (LLM): Implement WhatsAppNotificationService for Click-to-Chat link generation. Integrate into SalesOrderForm for "Order Ready" status, checking consent. Write tests for WhatsAppNotificationService.
Goal: Sales orders (all types) created and linked to shifts. Discounts applied. Custom lens configuration works. Basic WhatsApp notification. All new code analyzed first and tested.
Sprint 5: Payments, Abandoned Orders, Expenses (Linked to Shifts) & Order Completion (2-3 weeks)
Key Objectives: Implement full payment processing, abandoned order workflow with financial impact, expense management, and stock deduction for completed orders.
Tasks (Human developer guides LLM, ensuring analysis and testing):
Payment Processing Backend & UI (LLM): Implement PaymentRepository and PaymentService. Integrate RecordPaymentAndUpdateSalesOrder procedure into SalesOrderForm UI (e.g., payment dialog). Generate receipts. Write tests.
Abandoned Order Workflow (LLM): UI for marking order "Abandoned" and selecting restock items. Extend SalesOrderService to call ProcessAbandonedOrder procedure. Write tests for this workflow.
Expense Management Backend & UI (LLM): Implement ExpenseRepository and ExpenseService. UI for manual expense entry (linking cash expenses to shift). Verify auto-logging of "Loss on Abandoned Orders". Write tests.
Stock Deduction for Completed Orders (LLM): Implement logic in SalesOrderService to call ProcessOrderCompletionStockUpdate when order status is set to "Completed". Write tests.
Goal: Full payment, abandoned order, and expense workflows functional and linked to shifts. Stock correctly deducted. All new code analyzed first and tested.
Sprint 6: Shift Closing, Appointments & Core Reporting (3 weeks)
Key Objectives: Complete shift lifecycle with closing and reconciliation. Implement appointment management with WhatsApp reminders. Deliver core financial and operational reports.
Tasks (Human developer guides LLM, ensuring analysis and testing):
Shift Ending UI & Logic (LLM): Implement EndShiftDialog.fxml and controller. Logic to call EndShift DB procedure via ShiftService.
Shift Report UI & Backend (LLM): Develop ShiftReportView.fxml and controller to display summary and detailed transactions using DB views. Implement printing. Write tests for report data retrieval.
Appointment Management Backend & UI (LLM): Implement AppointmentRepository and AppointmentService. UI for scheduling, status updates. Integrate WhatsApp reminders (Click-to-Chat). Write tests.
Core Reports Implementation (LLM - one by one): UI and service logic for P&L (using GenerateProfitAndLossStatement), Inventory Valuation, Low Stock, Outstanding Payments, Expense reports. Basic Report Viewer UI with filtering. Write tests for service layer data retrieval for each report.
Goal: Shift closing and reporting complete. Appointments functional with notifications. Core reports available. All new code analyzed first and tested.
Sprint 7: Audit Logging, Advanced Permissions, WhatsApp Templates & Final Report Features (2 weeks)
Key Objectives: Implement and verify audit logging. Finalize permission checks. Make WhatsApp templates configurable. Enhance all reports with print/export.
Tasks (Human developer guides LLM, ensuring analysis and testing):
Audit Log Backend & UI (LLM): Implement AuditLogRepository and AuditLogService. Verify all audit triggers are working. Develop Admin UI for viewing/filtering AuditLog. Write tests.
Refine & Test Permissions (LLM & Human): Thoroughly test all granular permission checks across the application.
WhatsApp Template Management (LLM): UI for Admin to manage WhatsApp message templates (stored in ApplicationSettings). Write tests.
Report Enhancements (LLM): Add robust Print (JavaFX printing API) and Export (CSV, basic PDF via Apache PDFBox) to all reports.
Patient Purchase History Report (LLM): Implement this report. Write tests.
Goal: Audit trail fully functional. Permissions robust. WhatsApp templates configurable. Reports exportable. All new code analyzed first and tested.
Sprint 8: User Manual Content, Final Testing, UI/UX Polish & Deployment Preparation (2-3 weeks)
Tasks (Human Developer intensive, LLM assists with code polish, documentation generation, test case ideas):
Help Content Creation (Human Lead, LLM can draft sections): Write and finalize User Manual (EN/AR). Integrate into app (e.g., HTML for WebView).
Comprehensive End-to-End Testing (Human Lead, LLM can generate test scenarios): Functional, UI/UX (RTL/LTR, theme), performance, security, data integrity.
UI Polish & Bug Fixing (LLM & Human): Address all remaining UI/UX issues, theme inconsistencies. Fix all critical/high bugs.
Versioning & Build Finalization (Human Lead): Finalize version number. Ensure build process (jpackage for native installers) is robust.
Deployment Package & Documentation (Human Lead): Create final distributable package. Prepare setup/installation documentation.
Goal: Stable, thoroughly tested, documented application with complete Help content, ready for deployment. "Basariat POS" is "Lunch Ready". All code compiled and built without errors/warnings.
9.3. Key Milestones:
M0 (End Sprint 0): Runnable JavaFX application shell with functional initial Center Profile setup wizard, user login (basic/mocked initially), foundational database structure (all tables, views, core functions/procedures, triggers created and minimally tested), basic i18n support for the shell, a functional "About Basariat POS" dialog, and a placeholder Help section accessible from the main menu. Session context management for app.current_user_id and app.current_shift_id is established and tested. Project compiles and builds.
M1 (End Sprint 1): Full Admin capabilities for user account management (CRUD, password reset) and granular permissions assignment are complete and tested. Admin can manage Center Profile details post-setup, and manage core lookup data lists (Banks, Expense Categories, Product Categories, Application Settings). Users can successfully Start, Pause, and Resume their shifts via the UI; the UI accurately reflects the current shift state. Financial transactions are correctly blocked at both UI and database levels if no shift is 'Active' for the user. All new components are unit and integration tested. Project compiles and builds.
M2 (End Sprint 2): Complete Patient management module (CRUD, search, WhatsApp consent) and Optical Diagnostics module (data entry, history view) are fully functional and tested. The system correctly detects and guides the user to handle previously interrupted shifts (prompting for resume or allowing forcible end with appropriate safeguards). All new components are unit and integration tested. Project compiles and builds.
M3 (End Sprint 3): Full Product master and Inventory Item management (including all attributes, pricing, stock level tracking, low stock alerts/report) is functional and tested. Purchase Order management (creation, item addition, processing of stock receipts with automatic inventory quantity and cost price updates via database triggers) is complete and tested. Audited manual stock adjustments are possible and tested. All new components are unit and integration tested. Project compiles and builds.
M4 (End Sprint 4): Sales Order creation and management for all item types (stock items, fully configurable custom spectacle lenses with business rule enforcement and pricing, standard services, custom quote services) with discount functionality (permission-based) is complete and all sales orders are correctly linked to active shifts. Basic WhatsApp "Order Ready" notification (Click-to-Chat via WhatsAppNotificationService) is available and functional for consenting patients. All new components are unit and integration tested. Project compiles and builds.
M5 (End Sprint 5): Complete Payment processing (full/partial, cash/bank, linked to shifts via RecordPaymentAndUpdateSalesOrder procedure) is functional, including receipt generation. The full workflow for Abandoned Order processing (status change, UI for restocking selection, invocation of ProcessAbandonedOrder procedure for stock updates and automatic loss expense logging) is implemented and tested. Full Expense management (manual entries and automatic logging of losses, linked to shifts for cash expenses) is complete and tested. Stock deduction for 'Completed' orders (via ProcessOrderCompletionStockUpdate procedure) is functional and tested. All new components are unit and integration tested. Project compiles and builds.
M6 (End Sprint 6): The Shift Ending process (including user input of closing_cash_counted, system calculation of expected_cash_in_drawer and cash_variance via EndShift procedure) is fully implemented and tested. Detailed Shift Reports (both summary from ShiftReportSummaryView and transaction list from ShiftReportDetailedTransactionsView) are available, viewable, and printable for current and historical shifts. Appointment scheduling and management (including all status updates and WhatsApp reminders via Click-to-Chat for consenting patients) are fully functional and tested. Core Financial (P&L using GenerateProfitAndLossStatement, Expenses) and Operational (Inventory Valuation, Low Stock, Outstanding Payments) reports are implemented, viewable, and tested. All new components are unit and integration tested. Project compiles and builds.
M7 (End Sprint 7): Audit logging for all critical tables is fully implemented using database triggers (audit_changes_trigger_function), and the Admin Audit Log Viewer UI (with comprehensive filtering capabilities) is functional and tested. Granular permissions are rigorously tested and enforced across all application modules. WhatsApp message templates are configurable by Admin users via the UI (stored in ApplicationSettings). All key reports have robust Print and Export (to CSV, and basic PDF) capabilities, tested for functionality and output correctness. The Patient Purchase History report is complete and functional. All new components are unit and integration tested. Project compiles and builds.
M8 (End Sprint 8): The User Manual content is finalized in both English and Arabic and integrated into the application's Help section (e.g., via JavaFX WebView or accessible PDF). The entire "Basariat POS" system has undergone comprehensive end-to-end testing, including functional testing of all use cases, UI/UX testing (theme adherence, usability, RTL/LTR layouts, i18n accuracy), basic performance testing, security testing (access controls, input validation), and data integrity testing across various scenarios. All identified critical and high-priority bugs have been resolved. The application UI is polished and adheres to the defined theme. The final deployment package(s) (e.g., native installers via jpackage) and setup documentation are prepared and tested. "Basariat POS" is "Lunch Ready" and suitable for initial deployment to optical centers. The final build is clean (no errors or warnings) and all automated tests pass.
9.4. Assumptions for Planning:
The development team (even if a single developer interacting with an LLM) possesses or will acquire the necessary proficiency in Java 21, JavaFX (including FXML, CSS, and event handling), PostgreSQL (including PL/pgSQL for writing stored procedures, functions, and triggers), and the jOOQ framework.
Sprint durations (estimated at 2-3 weeks each) are indicative and may need adjustment based on the actual team's velocity, the final complexity encountered in UI design and implementation for each feature, and the thoroughness required for analysis and testing with LLM assistance.
Regular access to a stakeholder or a representative end-user (e.g., someone familiar with optical center operations) for feedback, clarification of requirements, and usability testing throughout the development sprints is highly beneficial for ensuring that the final product effectively meets the intended business needs and user expectations.
The "Basariat POS" application will consistently and correctly manage the setting of app.current_user_id and app.current_shift_id in the PostgreSQL database session via the set_app_user() and set_app_shift() procedures, respectively. These session variables are critical for the correct functioning of database triggers related to auditing and the automatic linkage of financial transactions to the correct user shifts.
The initial default password for the 'Admin' user (if one is created during the setup or by a script) will be clearly documented, and the Admin user will be strongly prompted (both by documentation and ideally by the application itself upon first login) to change this password to a strong, unique password immediately.
The optical center is responsible for procuring and maintaining the necessary hardware infrastructure (server PC for PostgreSQL, client PCs for the JavaFX application, reliable network infrastructure, printers) and for establishing and performing regular, verified backups of their "Basariat POS" PostgreSQL database.
The LLM coding agent will strictly adhere to the LLM_GUIDELINES.md document, particularly the rules regarding methodical analysis before coding and the mandatory inclusion of tests for all functional code.
